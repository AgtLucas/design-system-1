// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots DropdownMenu DropdownMenu 1`] = `
<div
  style={
    Object {
      "padding": "24px",
    }
  }
>
  <NDSProvider
    theme={
      Object {
        "borders": Array [],
        "breakpoints": Object {
          "extraLarge": "1920px",
          "extraSmall": "0px",
          "large": "1360px",
          "medium": "1024px",
          "small": "768px",
        },
        "colors": Object {
          "black": "#011e38",
          "blackBlue": "#122b47",
          "blue": "#216beb",
          "darkBlue": "#00438f",
          "darkGrey": "#434d59",
          "green": "#008059",
          "grey": "#c0c8d1",
          "lightBlue": "#e1ebfa",
          "lightGreen": "#e9f7f2",
          "lightGrey": "#e4e7eb",
          "lightRed": "#fae6ea",
          "lightYellow": "#fcf5e3",
          "red": "#cc1439",
          "white": "#ffffff",
          "whiteGrey": "#f0f2f5",
          "yellow": "#ffbb00",
        },
        "fontSizes": Object {
          "large": "20px",
          "larger": "26px",
          "largest": "46px",
          "medium": "16px",
          "small": "14px",
          "smaller": "12px",
        },
        "fontWeights": Object {
          "bold": "600",
          "light": "300",
          "medium": "500",
          "normal": "400",
        },
        "fonts": Object {
          "base": "'IBM Plex Sans', sans-serif",
          "mono": "'IBM Plex Mono', monospace",
        },
        "lineHeights": Object {
          "base": "1.5",
          "sectionTitle": "1.23076923",
          "smallTextBase": "1.71428571",
          "smallTextCompressed": "1.14285714",
          "smallerText": "1.33333333",
          "subsectionTitle": "1.2",
          "title": "1.04347826",
        },
        "radii": Object {
          "circle": "50%",
          "medium": "4px",
          "small": "2px",
        },
        "shadows": Object {
          "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
          "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
          "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
          "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
          "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
        },
        "space": Object {
          "half": "4px",
          "none": "0px",
          "x1": "8px",
          "x2": "16px",
          "x3": "24px",
          "x4": "32px",
          "x5": "40px",
          "x6": "48px",
          "x8": "64px",
        },
        "zIndex": Object {
          "content": 100,
          "overlay": 1000,
          "tabsBar": 210,
          "tabsScollIndicator": 200,
        },
      }
    }
  >
    <GlobalStyleComponent />
    <NDSProvider__GlobalStyles
      theme={
        Object {
          "borders": Array [],
          "breakpoints": Object {
            "extraLarge": "1920px",
            "extraSmall": "0px",
            "large": "1360px",
            "medium": "1024px",
            "small": "768px",
          },
          "colors": Object {
            "black": "#011e38",
            "blackBlue": "#122b47",
            "blue": "#216beb",
            "darkBlue": "#00438f",
            "darkGrey": "#434d59",
            "green": "#008059",
            "grey": "#c0c8d1",
            "lightBlue": "#e1ebfa",
            "lightGreen": "#e9f7f2",
            "lightGrey": "#e4e7eb",
            "lightRed": "#fae6ea",
            "lightYellow": "#fcf5e3",
            "red": "#cc1439",
            "white": "#ffffff",
            "whiteGrey": "#f0f2f5",
            "yellow": "#ffbb00",
          },
          "fontSizes": Object {
            "large": "20px",
            "larger": "26px",
            "largest": "46px",
            "medium": "16px",
            "small": "14px",
            "smaller": "12px",
          },
          "fontWeights": Object {
            "bold": "600",
            "light": "300",
            "medium": "500",
            "normal": "400",
          },
          "fonts": Object {
            "base": "'IBM Plex Sans', sans-serif",
            "mono": "'IBM Plex Mono', monospace",
          },
          "lineHeights": Object {
            "base": "1.5",
            "sectionTitle": "1.23076923",
            "smallTextBase": "1.71428571",
            "smallTextCompressed": "1.14285714",
            "smallerText": "1.33333333",
            "subsectionTitle": "1.2",
            "title": "1.04347826",
          },
          "radii": Object {
            "circle": "50%",
            "medium": "4px",
            "small": "2px",
          },
          "shadows": Object {
            "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
            "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
            "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
            "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
            "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
          },
          "space": Object {
            "half": "4px",
            "none": "0px",
            "x1": "8px",
            "x2": "16px",
            "x3": "24px",
            "x4": "32px",
            "x5": "40px",
            "x6": "48px",
            "x8": "64px",
          },
          "zIndex": Object {
            "content": 100,
            "overlay": 1000,
            "tabsBar": 210,
            "tabsScollIndicator": 200,
          },
        }
      }
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "NDSProvider__GlobalStyles-f28eoq-0",
              "isStatic": false,
              "lastClassName": "gWUgWA",
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "NDSProvider__GlobalStyles",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "NDSProvider__GlobalStyles-f28eoq-0",
            "target": "div",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        theme={
          Object {
            "borders": Array [],
            "breakpoints": Object {
              "extraLarge": "1920px",
              "extraSmall": "0px",
              "large": "1360px",
              "medium": "1024px",
              "small": "768px",
            },
            "colors": Object {
              "black": "#011e38",
              "blackBlue": "#122b47",
              "blue": "#216beb",
              "darkBlue": "#00438f",
              "darkGrey": "#434d59",
              "green": "#008059",
              "grey": "#c0c8d1",
              "lightBlue": "#e1ebfa",
              "lightGreen": "#e9f7f2",
              "lightGrey": "#e4e7eb",
              "lightRed": "#fae6ea",
              "lightYellow": "#fcf5e3",
              "red": "#cc1439",
              "white": "#ffffff",
              "whiteGrey": "#f0f2f5",
              "yellow": "#ffbb00",
            },
            "fontSizes": Object {
              "large": "20px",
              "larger": "26px",
              "largest": "46px",
              "medium": "16px",
              "small": "14px",
              "smaller": "12px",
            },
            "fontWeights": Object {
              "bold": "600",
              "light": "300",
              "medium": "500",
              "normal": "400",
            },
            "fonts": Object {
              "base": "'IBM Plex Sans', sans-serif",
              "mono": "'IBM Plex Mono', monospace",
            },
            "lineHeights": Object {
              "base": "1.5",
              "sectionTitle": "1.23076923",
              "smallTextBase": "1.71428571",
              "smallTextCompressed": "1.14285714",
              "smallerText": "1.33333333",
              "subsectionTitle": "1.2",
              "title": "1.04347826",
            },
            "radii": Object {
              "circle": "50%",
              "medium": "4px",
              "small": "2px",
            },
            "shadows": Object {
              "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
              "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
              "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
              "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
              "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
            },
            "space": Object {
              "half": "4px",
              "none": "0px",
              "x1": "8px",
              "x2": "16px",
              "x3": "24px",
              "x4": "32px",
              "x5": "40px",
              "x6": "48px",
              "x8": "64px",
            },
            "zIndex": Object {
              "content": 100,
              "overlay": 1000,
              "tabsBar": 210,
              "tabsScollIndicator": 200,
            },
          }
        }
      >
        <div
          className="NDSProvider__GlobalStyles-f28eoq-0 gWUgWA"
        >
          <ThemeProvider
            theme={
              Object {
                "borders": Array [],
                "breakpoints": Object {
                  "extraLarge": "1920px",
                  "extraSmall": "0px",
                  "large": "1360px",
                  "medium": "1024px",
                  "small": "768px",
                },
                "colors": Object {
                  "black": "#011e38",
                  "blackBlue": "#122b47",
                  "blue": "#216beb",
                  "darkBlue": "#00438f",
                  "darkGrey": "#434d59",
                  "green": "#008059",
                  "grey": "#c0c8d1",
                  "lightBlue": "#e1ebfa",
                  "lightGreen": "#e9f7f2",
                  "lightGrey": "#e4e7eb",
                  "lightRed": "#fae6ea",
                  "lightYellow": "#fcf5e3",
                  "red": "#cc1439",
                  "white": "#ffffff",
                  "whiteGrey": "#f0f2f5",
                  "yellow": "#ffbb00",
                },
                "fontSizes": Object {
                  "large": "20px",
                  "larger": "26px",
                  "largest": "46px",
                  "medium": "16px",
                  "small": "14px",
                  "smaller": "12px",
                },
                "fontWeights": Object {
                  "bold": "600",
                  "light": "300",
                  "medium": "500",
                  "normal": "400",
                },
                "fonts": Object {
                  "base": "'IBM Plex Sans', sans-serif",
                  "mono": "'IBM Plex Mono', monospace",
                },
                "lineHeights": Object {
                  "base": "1.5",
                  "sectionTitle": "1.23076923",
                  "smallTextBase": "1.71428571",
                  "smallTextCompressed": "1.14285714",
                  "smallerText": "1.33333333",
                  "subsectionTitle": "1.2",
                  "title": "1.04347826",
                },
                "radii": Object {
                  "circle": "50%",
                  "medium": "4px",
                  "small": "2px",
                },
                "shadows": Object {
                  "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
                  "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
                  "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
                  "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
                  "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
                },
                "space": Object {
                  "half": "4px",
                  "none": "0px",
                  "x1": "8px",
                  "x2": "16px",
                  "x3": "24px",
                  "x4": "32px",
                  "x5": "40px",
                  "x6": "48px",
                  "x8": "64px",
                },
                "zIndex": Object {
                  "content": 100,
                  "overlay": 1000,
                  "tabsBar": 210,
                  "tabsScollIndicator": 200,
                },
              }
            }
          >
            <MenuComponent
              defaultOpen={false}
              hideDelay="200"
              showDelay="100"
            >
              <MenuState
                defaultOpen={false}
                hideDelay="200"
                showDelay="100"
              >
                <StatelessDropdownMenu
                  disabled={false}
                  menuState={
                    Object {
                      "closeMenu": [Function],
                      "handleMenuKeydown": [Function],
                      "isOpen": false,
                      "openMenu": [Function],
                      "toggleMenu": [Function],
                    }
                  }
                  modifiers={
                    Object {
                      "preventOverflow": Object {
                        "boundariesElement": "viewport",
                        "enabled": true,
                        "padding": 8,
                      },
                    }
                  }
                  placement="bottom-start"
                  showArrow={true}
                  trigger={[Function]}
                >
                  <Manager>
                    <Reference>
                      <InnerReference
                        setReferenceNode={[Function]}
                      >
                        <Styled(Component)
                          aria-expanded={false}
                          aria-haspopup={true}
                          aria-label="Open menu"
                          disabled={null}
                          icon="more"
                          onBlur={[Function]}
                          onClick={[Function]}
                          type="button"
                        >
                          <StyledComponent
                            aria-expanded={false}
                            aria-haspopup={true}
                            aria-label="Open menu"
                            disabled={null}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-gZMcBi",
                                  "isStatic": false,
                                  "lastClassName": "giNnHm",
                                  "rules": Array [],
                                },
                                "displayName": "Styled(Component)",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-gZMcBi",
                                "target": Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "defaultProps": Object {
                                    "children": null,
                                    "className": undefined,
                                    "disabled": false,
                                    "labelHidden": false,
                                  },
                                  "propTypes": Object {
                                    "children": [Function],
                                    "className": [Function],
                                    "disabled": [Function],
                                    "icon": [Function],
                                    "labelHidden": [Function],
                                  },
                                  "render": [Function],
                                },
                                "toString": [Function],
                                "usesTheme": false,
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={[Function]}
                            icon="more"
                            onBlur={[Function]}
                            onClick={[Function]}
                            type="button"
                          >
                            <ForwardRef
                              aria-expanded={false}
                              aria-haspopup={true}
                              aria-label="Open menu"
                              className="sc-gZMcBi giNnHm"
                              disabled={null}
                              icon="more"
                              labelHidden={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              type="button"
                            >
                              <IconicButton__WrapperButton
                                aria-expanded={false}
                                aria-haspopup={true}
                                aria-label="Open menu"
                                className="sc-gZMcBi giNnHm"
                                disabled={null}
                                onBlur={[Function]}
                                onClick={[Function]}
                                type="button"
                              >
                                <StyledComponent
                                  aria-expanded={false}
                                  aria-haspopup={true}
                                  aria-label="Open menu"
                                  className="sc-gZMcBi giNnHm"
                                  disabled={null}
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "IconicButton__WrapperButton-sc-1u3dojp-1",
                                        "isStatic": false,
                                        "lastClassName": "dmBfBQ",
                                        "rules": Array [
                                          [Function],
                                          [Function],
                                        ],
                                      },
                                      "displayName": "IconicButton__WrapperButton",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "IconicButton__WrapperButton-sc-1u3dojp-1",
                                      "target": "button",
                                      "toString": [Function],
                                      "usesTheme": false,
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={[Function]}
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <button
                                    aria-expanded={false}
                                    aria-haspopup={true}
                                    aria-label="Open menu"
                                    className="IconicButton__WrapperButton-sc-1u3dojp-1 dmBfBQ sc-gZMcBi giNnHm"
                                    disabled={null}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <Manager>
                                      <Reference>
                                        <InnerReference
                                          setReferenceNode={[Function]}
                                        >
                                          <Styled(Component)
                                            color="currentColor"
                                            icon="more"
                                            p="half"
                                            size="32px"
                                            title={null}
                                          >
                                            <StyledComponent
                                              color="currentColor"
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "_foldedDefaultProps": Object {
                                                    "color": "currentColor",
                                                    "size": "24px",
                                                    "title": null,
                                                  },
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-bwzfXH",
                                                    "isStatic": false,
                                                    "lastClassName": "bbrsYH",
                                                    "rules": Array [
                                                      [Function],
                                                      [Function],
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "Styled(Component)",
                                                  "foldedComponentIds": Array [],
                                                  "propTypes": Object {
                                                    "color": [Function],
                                                    "icon": [Function],
                                                    "size": [Function],
                                                    "title": [Function],
                                                  },
                                                  "render": [Function],
                                                  "styledComponentId": "sc-bwzfXH",
                                                  "target": Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "defaultProps": Object {
                                                      "className": undefined,
                                                      "color": "currentColor",
                                                      "focusable": false,
                                                      "size": "24px",
                                                      "title": null,
                                                    },
                                                    "propTypes": Object {
                                                      "className": [Function],
                                                      "color": [Function],
                                                      "focusable": [Function],
                                                      "icon": [Function],
                                                      "size": [Function],
                                                      "title": [Function],
                                                    },
                                                    "render": [Function],
                                                  },
                                                  "toString": [Function],
                                                  "usesTheme": false,
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={[Function]}
                                              icon="more"
                                              p="half"
                                              size="32px"
                                              title={null}
                                            >
                                              <ForwardRef
                                                className="sc-bwzfXH bbrsYH"
                                                color="currentColor"
                                                focusable={false}
                                                icon="more"
                                                p="half"
                                                size="32px"
                                                title={null}
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="sc-bwzfXH bbrsYH"
                                                  color="currentColor"
                                                  fill="currentColor"
                                                  focusable={false}
                                                  height="32px"
                                                  icon="more"
                                                  p="half"
                                                  size="32px"
                                                  title={null}
                                                  viewBox="0 0 24 24"
                                                  width="32px"
                                                >
                                                  <path
                                                    d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
                                                    key="0"
                                                  />
                                                </svg>
                                              </ForwardRef>
                                            </StyledComponent>
                                          </Styled(Component)>
                                        </InnerReference>
                                      </Reference>
                                      <Popper
                                        modifiers={
                                          Object {
                                            "preventOverflow": Object {
                                              "boundariesElement": "viewport",
                                              "enabled": true,
                                              "padding": 8,
                                            },
                                          }
                                        }
                                        placement="bottom"
                                      >
                                        <InnerPopper
                                          eventsEnabled={true}
                                          modifiers={
                                            Object {
                                              "preventOverflow": Object {
                                                "boundariesElement": "viewport",
                                                "enabled": true,
                                                "padding": 8,
                                              },
                                            }
                                          }
                                          placement="bottom"
                                          positionFixed={false}
                                          referenceElement={
                                            <svg
                                              aria-hidden="true"
                                              class="sc-bwzfXH bbrsYH"
                                              color="currentColor"
                                              fill="currentColor"
                                              focusable="false"
                                              height="32px"
                                              icon="more"
                                              p="half"
                                              viewBox="0 0 24 24"
                                              width="32px"
                                            >
                                              <path
                                                d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
                                              />
                                            </svg>
                                          }
                                        />
                                      </Popper>
                                    </Manager>
                                  </button>
                                </StyledComponent>
                              </IconicButton__WrapperButton>
                            </ForwardRef>
                          </StyledComponent>
                        </Styled(Component)>
                      </InnerReference>
                    </Reference>
                  </Manager>
                </StatelessDropdownMenu>
              </MenuState>
            </MenuComponent>
          </ThemeProvider>
        </div>
      </StyledComponent>
    </NDSProvider__GlobalStyles>
  </NDSProvider>
</div>
`;

exports[`Storyshots DropdownMenu Set to disabled 1`] = `
<div
  style={
    Object {
      "padding": "24px",
    }
  }
>
  <NDSProvider
    theme={
      Object {
        "borders": Array [],
        "breakpoints": Object {
          "extraLarge": "1920px",
          "extraSmall": "0px",
          "large": "1360px",
          "medium": "1024px",
          "small": "768px",
        },
        "colors": Object {
          "black": "#011e38",
          "blackBlue": "#122b47",
          "blue": "#216beb",
          "darkBlue": "#00438f",
          "darkGrey": "#434d59",
          "green": "#008059",
          "grey": "#c0c8d1",
          "lightBlue": "#e1ebfa",
          "lightGreen": "#e9f7f2",
          "lightGrey": "#e4e7eb",
          "lightRed": "#fae6ea",
          "lightYellow": "#fcf5e3",
          "red": "#cc1439",
          "white": "#ffffff",
          "whiteGrey": "#f0f2f5",
          "yellow": "#ffbb00",
        },
        "fontSizes": Object {
          "large": "20px",
          "larger": "26px",
          "largest": "46px",
          "medium": "16px",
          "small": "14px",
          "smaller": "12px",
        },
        "fontWeights": Object {
          "bold": "600",
          "light": "300",
          "medium": "500",
          "normal": "400",
        },
        "fonts": Object {
          "base": "'IBM Plex Sans', sans-serif",
          "mono": "'IBM Plex Mono', monospace",
        },
        "lineHeights": Object {
          "base": "1.5",
          "sectionTitle": "1.23076923",
          "smallTextBase": "1.71428571",
          "smallTextCompressed": "1.14285714",
          "smallerText": "1.33333333",
          "subsectionTitle": "1.2",
          "title": "1.04347826",
        },
        "radii": Object {
          "circle": "50%",
          "medium": "4px",
          "small": "2px",
        },
        "shadows": Object {
          "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
          "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
          "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
          "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
          "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
        },
        "space": Object {
          "half": "4px",
          "none": "0px",
          "x1": "8px",
          "x2": "16px",
          "x3": "24px",
          "x4": "32px",
          "x5": "40px",
          "x6": "48px",
          "x8": "64px",
        },
        "zIndex": Object {
          "content": 100,
          "overlay": 1000,
          "tabsBar": 210,
          "tabsScollIndicator": 200,
        },
      }
    }
  >
    <GlobalStyleComponent />
    <NDSProvider__GlobalStyles
      theme={
        Object {
          "borders": Array [],
          "breakpoints": Object {
            "extraLarge": "1920px",
            "extraSmall": "0px",
            "large": "1360px",
            "medium": "1024px",
            "small": "768px",
          },
          "colors": Object {
            "black": "#011e38",
            "blackBlue": "#122b47",
            "blue": "#216beb",
            "darkBlue": "#00438f",
            "darkGrey": "#434d59",
            "green": "#008059",
            "grey": "#c0c8d1",
            "lightBlue": "#e1ebfa",
            "lightGreen": "#e9f7f2",
            "lightGrey": "#e4e7eb",
            "lightRed": "#fae6ea",
            "lightYellow": "#fcf5e3",
            "red": "#cc1439",
            "white": "#ffffff",
            "whiteGrey": "#f0f2f5",
            "yellow": "#ffbb00",
          },
          "fontSizes": Object {
            "large": "20px",
            "larger": "26px",
            "largest": "46px",
            "medium": "16px",
            "small": "14px",
            "smaller": "12px",
          },
          "fontWeights": Object {
            "bold": "600",
            "light": "300",
            "medium": "500",
            "normal": "400",
          },
          "fonts": Object {
            "base": "'IBM Plex Sans', sans-serif",
            "mono": "'IBM Plex Mono', monospace",
          },
          "lineHeights": Object {
            "base": "1.5",
            "sectionTitle": "1.23076923",
            "smallTextBase": "1.71428571",
            "smallTextCompressed": "1.14285714",
            "smallerText": "1.33333333",
            "subsectionTitle": "1.2",
            "title": "1.04347826",
          },
          "radii": Object {
            "circle": "50%",
            "medium": "4px",
            "small": "2px",
          },
          "shadows": Object {
            "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
            "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
            "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
            "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
            "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
          },
          "space": Object {
            "half": "4px",
            "none": "0px",
            "x1": "8px",
            "x2": "16px",
            "x3": "24px",
            "x4": "32px",
            "x5": "40px",
            "x6": "48px",
            "x8": "64px",
          },
          "zIndex": Object {
            "content": 100,
            "overlay": 1000,
            "tabsBar": 210,
            "tabsScollIndicator": 200,
          },
        }
      }
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "NDSProvider__GlobalStyles-f28eoq-0",
              "isStatic": false,
              "lastClassName": "gWUgWA",
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "NDSProvider__GlobalStyles",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "NDSProvider__GlobalStyles-f28eoq-0",
            "target": "div",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        theme={
          Object {
            "borders": Array [],
            "breakpoints": Object {
              "extraLarge": "1920px",
              "extraSmall": "0px",
              "large": "1360px",
              "medium": "1024px",
              "small": "768px",
            },
            "colors": Object {
              "black": "#011e38",
              "blackBlue": "#122b47",
              "blue": "#216beb",
              "darkBlue": "#00438f",
              "darkGrey": "#434d59",
              "green": "#008059",
              "grey": "#c0c8d1",
              "lightBlue": "#e1ebfa",
              "lightGreen": "#e9f7f2",
              "lightGrey": "#e4e7eb",
              "lightRed": "#fae6ea",
              "lightYellow": "#fcf5e3",
              "red": "#cc1439",
              "white": "#ffffff",
              "whiteGrey": "#f0f2f5",
              "yellow": "#ffbb00",
            },
            "fontSizes": Object {
              "large": "20px",
              "larger": "26px",
              "largest": "46px",
              "medium": "16px",
              "small": "14px",
              "smaller": "12px",
            },
            "fontWeights": Object {
              "bold": "600",
              "light": "300",
              "medium": "500",
              "normal": "400",
            },
            "fonts": Object {
              "base": "'IBM Plex Sans', sans-serif",
              "mono": "'IBM Plex Mono', monospace",
            },
            "lineHeights": Object {
              "base": "1.5",
              "sectionTitle": "1.23076923",
              "smallTextBase": "1.71428571",
              "smallTextCompressed": "1.14285714",
              "smallerText": "1.33333333",
              "subsectionTitle": "1.2",
              "title": "1.04347826",
            },
            "radii": Object {
              "circle": "50%",
              "medium": "4px",
              "small": "2px",
            },
            "shadows": Object {
              "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
              "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
              "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
              "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
              "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
            },
            "space": Object {
              "half": "4px",
              "none": "0px",
              "x1": "8px",
              "x2": "16px",
              "x3": "24px",
              "x4": "32px",
              "x5": "40px",
              "x6": "48px",
              "x8": "64px",
            },
            "zIndex": Object {
              "content": 100,
              "overlay": 1000,
              "tabsBar": 210,
              "tabsScollIndicator": 200,
            },
          }
        }
      >
        <div
          className="NDSProvider__GlobalStyles-f28eoq-0 gWUgWA"
        >
          <ThemeProvider
            theme={
              Object {
                "borders": Array [],
                "breakpoints": Object {
                  "extraLarge": "1920px",
                  "extraSmall": "0px",
                  "large": "1360px",
                  "medium": "1024px",
                  "small": "768px",
                },
                "colors": Object {
                  "black": "#011e38",
                  "blackBlue": "#122b47",
                  "blue": "#216beb",
                  "darkBlue": "#00438f",
                  "darkGrey": "#434d59",
                  "green": "#008059",
                  "grey": "#c0c8d1",
                  "lightBlue": "#e1ebfa",
                  "lightGreen": "#e9f7f2",
                  "lightGrey": "#e4e7eb",
                  "lightRed": "#fae6ea",
                  "lightYellow": "#fcf5e3",
                  "red": "#cc1439",
                  "white": "#ffffff",
                  "whiteGrey": "#f0f2f5",
                  "yellow": "#ffbb00",
                },
                "fontSizes": Object {
                  "large": "20px",
                  "larger": "26px",
                  "largest": "46px",
                  "medium": "16px",
                  "small": "14px",
                  "smaller": "12px",
                },
                "fontWeights": Object {
                  "bold": "600",
                  "light": "300",
                  "medium": "500",
                  "normal": "400",
                },
                "fonts": Object {
                  "base": "'IBM Plex Sans', sans-serif",
                  "mono": "'IBM Plex Mono', monospace",
                },
                "lineHeights": Object {
                  "base": "1.5",
                  "sectionTitle": "1.23076923",
                  "smallTextBase": "1.71428571",
                  "smallTextCompressed": "1.14285714",
                  "smallerText": "1.33333333",
                  "subsectionTitle": "1.2",
                  "title": "1.04347826",
                },
                "radii": Object {
                  "circle": "50%",
                  "medium": "4px",
                  "small": "2px",
                },
                "shadows": Object {
                  "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
                  "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
                  "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
                  "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
                  "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
                },
                "space": Object {
                  "half": "4px",
                  "none": "0px",
                  "x1": "8px",
                  "x2": "16px",
                  "x3": "24px",
                  "x4": "32px",
                  "x5": "40px",
                  "x6": "48px",
                  "x8": "64px",
                },
                "zIndex": Object {
                  "content": 100,
                  "overlay": 1000,
                  "tabsBar": 210,
                  "tabsScollIndicator": 200,
                },
              }
            }
          >
            <MenuComponent
              defaultOpen={false}
              disabled={true}
              hideDelay="200"
              showDelay="100"
            >
              <MenuState
                defaultOpen={false}
                hideDelay="200"
                showDelay="100"
              >
                <StatelessDropdownMenu
                  disabled={true}
                  menuState={
                    Object {
                      "closeMenu": [Function],
                      "handleMenuKeydown": [Function],
                      "isOpen": false,
                      "openMenu": [Function],
                      "toggleMenu": [Function],
                    }
                  }
                  modifiers={
                    Object {
                      "preventOverflow": Object {
                        "boundariesElement": "viewport",
                        "enabled": true,
                        "padding": 8,
                      },
                    }
                  }
                  placement="bottom-start"
                  showArrow={true}
                  trigger={[Function]}
                >
                  <Manager>
                    <Reference>
                      <InnerReference
                        setReferenceNode={[Function]}
                      >
                        <Styled(Component)
                          aria-expanded={false}
                          aria-haspopup={true}
                          aria-label="Open menu"
                          disabled={true}
                          icon="more"
                          onBlur={[Function]}
                          onClick={[Function]}
                          type="button"
                        >
                          <StyledComponent
                            aria-expanded={false}
                            aria-haspopup={true}
                            aria-label="Open menu"
                            disabled={true}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-gZMcBi",
                                  "isStatic": false,
                                  "lastClassName": "giNnHm",
                                  "rules": Array [],
                                },
                                "displayName": "Styled(Component)",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-gZMcBi",
                                "target": Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "defaultProps": Object {
                                    "children": null,
                                    "className": undefined,
                                    "disabled": false,
                                    "labelHidden": false,
                                  },
                                  "propTypes": Object {
                                    "children": [Function],
                                    "className": [Function],
                                    "disabled": [Function],
                                    "icon": [Function],
                                    "labelHidden": [Function],
                                  },
                                  "render": [Function],
                                },
                                "toString": [Function],
                                "usesTheme": false,
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={[Function]}
                            icon="more"
                            onBlur={[Function]}
                            onClick={[Function]}
                            type="button"
                          >
                            <ForwardRef
                              aria-expanded={false}
                              aria-haspopup={true}
                              aria-label="Open menu"
                              className="sc-gZMcBi giNnHm"
                              disabled={true}
                              icon="more"
                              labelHidden={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              type="button"
                            >
                              <IconicButton__WrapperButton
                                aria-expanded={false}
                                aria-haspopup={true}
                                aria-label="Open menu"
                                className="sc-gZMcBi giNnHm"
                                disabled={true}
                                onBlur={[Function]}
                                onClick={[Function]}
                                type="button"
                              >
                                <StyledComponent
                                  aria-expanded={false}
                                  aria-haspopup={true}
                                  aria-label="Open menu"
                                  className="sc-gZMcBi giNnHm"
                                  disabled={true}
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "IconicButton__WrapperButton-sc-1u3dojp-1",
                                        "isStatic": false,
                                        "lastClassName": "hlUypq",
                                        "rules": Array [
                                          [Function],
                                          [Function],
                                        ],
                                      },
                                      "displayName": "IconicButton__WrapperButton",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "IconicButton__WrapperButton-sc-1u3dojp-1",
                                      "target": "button",
                                      "toString": [Function],
                                      "usesTheme": false,
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={[Function]}
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <button
                                    aria-expanded={false}
                                    aria-haspopup={true}
                                    aria-label="Open menu"
                                    className="IconicButton__WrapperButton-sc-1u3dojp-1 hlUypq sc-gZMcBi giNnHm"
                                    disabled={true}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <Manager>
                                      <Reference>
                                        <InnerReference
                                          setReferenceNode={[Function]}
                                        >
                                          <Styled(Component)
                                            color="currentColor"
                                            icon="more"
                                            p="half"
                                            size="32px"
                                            title={null}
                                          >
                                            <StyledComponent
                                              color="currentColor"
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "_foldedDefaultProps": Object {
                                                    "color": "currentColor",
                                                    "size": "24px",
                                                    "title": null,
                                                  },
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-bwzfXH",
                                                    "isStatic": false,
                                                    "lastClassName": "bbrsYH",
                                                    "rules": Array [
                                                      [Function],
                                                      [Function],
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "Styled(Component)",
                                                  "foldedComponentIds": Array [],
                                                  "propTypes": Object {
                                                    "color": [Function],
                                                    "icon": [Function],
                                                    "size": [Function],
                                                    "title": [Function],
                                                  },
                                                  "render": [Function],
                                                  "styledComponentId": "sc-bwzfXH",
                                                  "target": Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "defaultProps": Object {
                                                      "className": undefined,
                                                      "color": "currentColor",
                                                      "focusable": false,
                                                      "size": "24px",
                                                      "title": null,
                                                    },
                                                    "propTypes": Object {
                                                      "className": [Function],
                                                      "color": [Function],
                                                      "focusable": [Function],
                                                      "icon": [Function],
                                                      "size": [Function],
                                                      "title": [Function],
                                                    },
                                                    "render": [Function],
                                                  },
                                                  "toString": [Function],
                                                  "usesTheme": false,
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={[Function]}
                                              icon="more"
                                              p="half"
                                              size="32px"
                                              title={null}
                                            >
                                              <ForwardRef
                                                className="sc-bwzfXH bbrsYH"
                                                color="currentColor"
                                                focusable={false}
                                                icon="more"
                                                p="half"
                                                size="32px"
                                                title={null}
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="sc-bwzfXH bbrsYH"
                                                  color="currentColor"
                                                  fill="currentColor"
                                                  focusable={false}
                                                  height="32px"
                                                  icon="more"
                                                  p="half"
                                                  size="32px"
                                                  title={null}
                                                  viewBox="0 0 24 24"
                                                  width="32px"
                                                >
                                                  <path
                                                    d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
                                                    key="0"
                                                  />
                                                </svg>
                                              </ForwardRef>
                                            </StyledComponent>
                                          </Styled(Component)>
                                        </InnerReference>
                                      </Reference>
                                      <Popper
                                        modifiers={
                                          Object {
                                            "preventOverflow": Object {
                                              "boundariesElement": "viewport",
                                              "enabled": true,
                                              "padding": 8,
                                            },
                                          }
                                        }
                                        placement="bottom"
                                      >
                                        <InnerPopper
                                          eventsEnabled={true}
                                          modifiers={
                                            Object {
                                              "preventOverflow": Object {
                                                "boundariesElement": "viewport",
                                                "enabled": true,
                                                "padding": 8,
                                              },
                                            }
                                          }
                                          placement="bottom"
                                          positionFixed={false}
                                          referenceElement={
                                            <svg
                                              aria-hidden="true"
                                              class="sc-bwzfXH bbrsYH"
                                              color="currentColor"
                                              fill="currentColor"
                                              focusable="false"
                                              height="32px"
                                              icon="more"
                                              p="half"
                                              viewBox="0 0 24 24"
                                              width="32px"
                                            >
                                              <path
                                                d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
                                              />
                                            </svg>
                                          }
                                        />
                                      </Popper>
                                    </Manager>
                                  </button>
                                </StyledComponent>
                              </IconicButton__WrapperButton>
                            </ForwardRef>
                          </StyledComponent>
                        </Styled(Component)>
                      </InnerReference>
                    </Reference>
                  </Manager>
                </StatelessDropdownMenu>
              </MenuState>
            </MenuComponent>
          </ThemeProvider>
        </div>
      </StyledComponent>
    </NDSProvider__GlobalStyles>
  </NDSProvider>
</div>
`;

exports[`Storyshots DropdownMenu set to defaultOpen 1`] = `
<div
  style={
    Object {
      "padding": "24px",
    }
  }
>
  <NDSProvider
    theme={
      Object {
        "borders": Array [],
        "breakpoints": Object {
          "extraLarge": "1920px",
          "extraSmall": "0px",
          "large": "1360px",
          "medium": "1024px",
          "small": "768px",
        },
        "colors": Object {
          "black": "#011e38",
          "blackBlue": "#122b47",
          "blue": "#216beb",
          "darkBlue": "#00438f",
          "darkGrey": "#434d59",
          "green": "#008059",
          "grey": "#c0c8d1",
          "lightBlue": "#e1ebfa",
          "lightGreen": "#e9f7f2",
          "lightGrey": "#e4e7eb",
          "lightRed": "#fae6ea",
          "lightYellow": "#fcf5e3",
          "red": "#cc1439",
          "white": "#ffffff",
          "whiteGrey": "#f0f2f5",
          "yellow": "#ffbb00",
        },
        "fontSizes": Object {
          "large": "20px",
          "larger": "26px",
          "largest": "46px",
          "medium": "16px",
          "small": "14px",
          "smaller": "12px",
        },
        "fontWeights": Object {
          "bold": "600",
          "light": "300",
          "medium": "500",
          "normal": "400",
        },
        "fonts": Object {
          "base": "'IBM Plex Sans', sans-serif",
          "mono": "'IBM Plex Mono', monospace",
        },
        "lineHeights": Object {
          "base": "1.5",
          "sectionTitle": "1.23076923",
          "smallTextBase": "1.71428571",
          "smallTextCompressed": "1.14285714",
          "smallerText": "1.33333333",
          "subsectionTitle": "1.2",
          "title": "1.04347826",
        },
        "radii": Object {
          "circle": "50%",
          "medium": "4px",
          "small": "2px",
        },
        "shadows": Object {
          "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
          "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
          "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
          "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
          "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
        },
        "space": Object {
          "half": "4px",
          "none": "0px",
          "x1": "8px",
          "x2": "16px",
          "x3": "24px",
          "x4": "32px",
          "x5": "40px",
          "x6": "48px",
          "x8": "64px",
        },
        "zIndex": Object {
          "content": 100,
          "overlay": 1000,
          "tabsBar": 210,
          "tabsScollIndicator": 200,
        },
      }
    }
  >
    <GlobalStyleComponent />
    <NDSProvider__GlobalStyles
      theme={
        Object {
          "borders": Array [],
          "breakpoints": Object {
            "extraLarge": "1920px",
            "extraSmall": "0px",
            "large": "1360px",
            "medium": "1024px",
            "small": "768px",
          },
          "colors": Object {
            "black": "#011e38",
            "blackBlue": "#122b47",
            "blue": "#216beb",
            "darkBlue": "#00438f",
            "darkGrey": "#434d59",
            "green": "#008059",
            "grey": "#c0c8d1",
            "lightBlue": "#e1ebfa",
            "lightGreen": "#e9f7f2",
            "lightGrey": "#e4e7eb",
            "lightRed": "#fae6ea",
            "lightYellow": "#fcf5e3",
            "red": "#cc1439",
            "white": "#ffffff",
            "whiteGrey": "#f0f2f5",
            "yellow": "#ffbb00",
          },
          "fontSizes": Object {
            "large": "20px",
            "larger": "26px",
            "largest": "46px",
            "medium": "16px",
            "small": "14px",
            "smaller": "12px",
          },
          "fontWeights": Object {
            "bold": "600",
            "light": "300",
            "medium": "500",
            "normal": "400",
          },
          "fonts": Object {
            "base": "'IBM Plex Sans', sans-serif",
            "mono": "'IBM Plex Mono', monospace",
          },
          "lineHeights": Object {
            "base": "1.5",
            "sectionTitle": "1.23076923",
            "smallTextBase": "1.71428571",
            "smallTextCompressed": "1.14285714",
            "smallerText": "1.33333333",
            "subsectionTitle": "1.2",
            "title": "1.04347826",
          },
          "radii": Object {
            "circle": "50%",
            "medium": "4px",
            "small": "2px",
          },
          "shadows": Object {
            "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
            "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
            "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
            "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
            "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
          },
          "space": Object {
            "half": "4px",
            "none": "0px",
            "x1": "8px",
            "x2": "16px",
            "x3": "24px",
            "x4": "32px",
            "x5": "40px",
            "x6": "48px",
            "x8": "64px",
          },
          "zIndex": Object {
            "content": 100,
            "overlay": 1000,
            "tabsBar": 210,
            "tabsScollIndicator": 200,
          },
        }
      }
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "NDSProvider__GlobalStyles-f28eoq-0",
              "isStatic": false,
              "lastClassName": "gWUgWA",
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "NDSProvider__GlobalStyles",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "NDSProvider__GlobalStyles-f28eoq-0",
            "target": "div",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        theme={
          Object {
            "borders": Array [],
            "breakpoints": Object {
              "extraLarge": "1920px",
              "extraSmall": "0px",
              "large": "1360px",
              "medium": "1024px",
              "small": "768px",
            },
            "colors": Object {
              "black": "#011e38",
              "blackBlue": "#122b47",
              "blue": "#216beb",
              "darkBlue": "#00438f",
              "darkGrey": "#434d59",
              "green": "#008059",
              "grey": "#c0c8d1",
              "lightBlue": "#e1ebfa",
              "lightGreen": "#e9f7f2",
              "lightGrey": "#e4e7eb",
              "lightRed": "#fae6ea",
              "lightYellow": "#fcf5e3",
              "red": "#cc1439",
              "white": "#ffffff",
              "whiteGrey": "#f0f2f5",
              "yellow": "#ffbb00",
            },
            "fontSizes": Object {
              "large": "20px",
              "larger": "26px",
              "largest": "46px",
              "medium": "16px",
              "small": "14px",
              "smaller": "12px",
            },
            "fontWeights": Object {
              "bold": "600",
              "light": "300",
              "medium": "500",
              "normal": "400",
            },
            "fonts": Object {
              "base": "'IBM Plex Sans', sans-serif",
              "mono": "'IBM Plex Mono', monospace",
            },
            "lineHeights": Object {
              "base": "1.5",
              "sectionTitle": "1.23076923",
              "smallTextBase": "1.71428571",
              "smallTextCompressed": "1.14285714",
              "smallerText": "1.33333333",
              "subsectionTitle": "1.2",
              "title": "1.04347826",
            },
            "radii": Object {
              "circle": "50%",
              "medium": "4px",
              "small": "2px",
            },
            "shadows": Object {
              "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
              "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
              "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
              "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
              "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
            },
            "space": Object {
              "half": "4px",
              "none": "0px",
              "x1": "8px",
              "x2": "16px",
              "x3": "24px",
              "x4": "32px",
              "x5": "40px",
              "x6": "48px",
              "x8": "64px",
            },
            "zIndex": Object {
              "content": 100,
              "overlay": 1000,
              "tabsBar": 210,
              "tabsScollIndicator": 200,
            },
          }
        }
      >
        <div
          className="NDSProvider__GlobalStyles-f28eoq-0 gWUgWA"
        >
          <ThemeProvider
            theme={
              Object {
                "borders": Array [],
                "breakpoints": Object {
                  "extraLarge": "1920px",
                  "extraSmall": "0px",
                  "large": "1360px",
                  "medium": "1024px",
                  "small": "768px",
                },
                "colors": Object {
                  "black": "#011e38",
                  "blackBlue": "#122b47",
                  "blue": "#216beb",
                  "darkBlue": "#00438f",
                  "darkGrey": "#434d59",
                  "green": "#008059",
                  "grey": "#c0c8d1",
                  "lightBlue": "#e1ebfa",
                  "lightGreen": "#e9f7f2",
                  "lightGrey": "#e4e7eb",
                  "lightRed": "#fae6ea",
                  "lightYellow": "#fcf5e3",
                  "red": "#cc1439",
                  "white": "#ffffff",
                  "whiteGrey": "#f0f2f5",
                  "yellow": "#ffbb00",
                },
                "fontSizes": Object {
                  "large": "20px",
                  "larger": "26px",
                  "largest": "46px",
                  "medium": "16px",
                  "small": "14px",
                  "smaller": "12px",
                },
                "fontWeights": Object {
                  "bold": "600",
                  "light": "300",
                  "medium": "500",
                  "normal": "400",
                },
                "fonts": Object {
                  "base": "'IBM Plex Sans', sans-serif",
                  "mono": "'IBM Plex Mono', monospace",
                },
                "lineHeights": Object {
                  "base": "1.5",
                  "sectionTitle": "1.23076923",
                  "smallTextBase": "1.71428571",
                  "smallTextCompressed": "1.14285714",
                  "smallerText": "1.33333333",
                  "subsectionTitle": "1.2",
                  "title": "1.04347826",
                },
                "radii": Object {
                  "circle": "50%",
                  "medium": "4px",
                  "small": "2px",
                },
                "shadows": Object {
                  "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
                  "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
                  "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
                  "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
                  "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
                },
                "space": Object {
                  "half": "4px",
                  "none": "0px",
                  "x1": "8px",
                  "x2": "16px",
                  "x3": "24px",
                  "x4": "32px",
                  "x5": "40px",
                  "x6": "48px",
                  "x8": "64px",
                },
                "zIndex": Object {
                  "content": 100,
                  "overlay": 1000,
                  "tabsBar": 210,
                  "tabsScollIndicator": 200,
                },
              }
            }
          >
            <MenuComponent
              defaultOpen={true}
              hideDelay="200"
              showDelay="100"
            >
              <MenuState
                defaultOpen={true}
                hideDelay="200"
                showDelay="100"
              >
                <StatelessDropdownMenu
                  disabled={false}
                  menuState={
                    Object {
                      "closeMenu": [Function],
                      "handleMenuKeydown": [Function],
                      "isOpen": true,
                      "openMenu": [Function],
                      "toggleMenu": [Function],
                    }
                  }
                  modifiers={
                    Object {
                      "preventOverflow": Object {
                        "boundariesElement": "viewport",
                        "enabled": true,
                        "padding": 8,
                      },
                    }
                  }
                  placement="bottom-start"
                  showArrow={true}
                  trigger={[Function]}
                >
                  <Manager>
                    <Reference>
                      <InnerReference
                        setReferenceNode={[Function]}
                      >
                        <Styled(Component)
                          aria-expanded={true}
                          aria-haspopup={true}
                          aria-label="Close menu"
                          disabled={null}
                          icon="more"
                          onBlur={[Function]}
                          onClick={[Function]}
                          type="button"
                        >
                          <StyledComponent
                            aria-expanded={true}
                            aria-haspopup={true}
                            aria-label="Close menu"
                            disabled={null}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-gZMcBi",
                                  "isStatic": false,
                                  "lastClassName": "giNnHm",
                                  "rules": Array [],
                                },
                                "displayName": "Styled(Component)",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-gZMcBi",
                                "target": Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "defaultProps": Object {
                                    "children": null,
                                    "className": undefined,
                                    "disabled": false,
                                    "labelHidden": false,
                                  },
                                  "propTypes": Object {
                                    "children": [Function],
                                    "className": [Function],
                                    "disabled": [Function],
                                    "icon": [Function],
                                    "labelHidden": [Function],
                                  },
                                  "render": [Function],
                                },
                                "toString": [Function],
                                "usesTheme": false,
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={[Function]}
                            icon="more"
                            onBlur={[Function]}
                            onClick={[Function]}
                            type="button"
                          >
                            <ForwardRef
                              aria-expanded={true}
                              aria-haspopup={true}
                              aria-label="Close menu"
                              className="sc-gZMcBi giNnHm"
                              disabled={null}
                              icon="more"
                              labelHidden={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              type="button"
                            >
                              <IconicButton__WrapperButton
                                aria-expanded={true}
                                aria-haspopup={true}
                                aria-label="Close menu"
                                className="sc-gZMcBi giNnHm"
                                disabled={null}
                                onBlur={[Function]}
                                onClick={[Function]}
                                type="button"
                              >
                                <StyledComponent
                                  aria-expanded={true}
                                  aria-haspopup={true}
                                  aria-label="Close menu"
                                  className="sc-gZMcBi giNnHm"
                                  disabled={null}
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "IconicButton__WrapperButton-sc-1u3dojp-1",
                                        "isStatic": false,
                                        "lastClassName": "dmBfBQ",
                                        "rules": Array [
                                          [Function],
                                          [Function],
                                        ],
                                      },
                                      "displayName": "IconicButton__WrapperButton",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "IconicButton__WrapperButton-sc-1u3dojp-1",
                                      "target": "button",
                                      "toString": [Function],
                                      "usesTheme": false,
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={[Function]}
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <button
                                    aria-expanded={true}
                                    aria-haspopup={true}
                                    aria-label="Close menu"
                                    className="IconicButton__WrapperButton-sc-1u3dojp-1 dmBfBQ sc-gZMcBi giNnHm"
                                    disabled={null}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <Manager>
                                      <Reference>
                                        <InnerReference
                                          setReferenceNode={[Function]}
                                        >
                                          <Styled(Component)
                                            color="currentColor"
                                            icon="more"
                                            p="half"
                                            size="32px"
                                            title={null}
                                          >
                                            <StyledComponent
                                              color="currentColor"
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "_foldedDefaultProps": Object {
                                                    "color": "currentColor",
                                                    "size": "24px",
                                                    "title": null,
                                                  },
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-bwzfXH",
                                                    "isStatic": false,
                                                    "lastClassName": "bbrsYH",
                                                    "rules": Array [
                                                      [Function],
                                                      [Function],
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "Styled(Component)",
                                                  "foldedComponentIds": Array [],
                                                  "propTypes": Object {
                                                    "color": [Function],
                                                    "icon": [Function],
                                                    "size": [Function],
                                                    "title": [Function],
                                                  },
                                                  "render": [Function],
                                                  "styledComponentId": "sc-bwzfXH",
                                                  "target": Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "defaultProps": Object {
                                                      "className": undefined,
                                                      "color": "currentColor",
                                                      "focusable": false,
                                                      "size": "24px",
                                                      "title": null,
                                                    },
                                                    "propTypes": Object {
                                                      "className": [Function],
                                                      "color": [Function],
                                                      "focusable": [Function],
                                                      "icon": [Function],
                                                      "size": [Function],
                                                      "title": [Function],
                                                    },
                                                    "render": [Function],
                                                  },
                                                  "toString": [Function],
                                                  "usesTheme": false,
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={[Function]}
                                              icon="more"
                                              p="half"
                                              size="32px"
                                              title={null}
                                            >
                                              <ForwardRef
                                                className="sc-bwzfXH bbrsYH"
                                                color="currentColor"
                                                focusable={false}
                                                icon="more"
                                                p="half"
                                                size="32px"
                                                title={null}
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="sc-bwzfXH bbrsYH"
                                                  color="currentColor"
                                                  fill="currentColor"
                                                  focusable={false}
                                                  height="32px"
                                                  icon="more"
                                                  p="half"
                                                  size="32px"
                                                  title={null}
                                                  viewBox="0 0 24 24"
                                                  width="32px"
                                                >
                                                  <path
                                                    d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
                                                    key="0"
                                                  />
                                                </svg>
                                              </ForwardRef>
                                            </StyledComponent>
                                          </Styled(Component)>
                                        </InnerReference>
                                      </Reference>
                                      <Popper
                                        modifiers={
                                          Object {
                                            "preventOverflow": Object {
                                              "boundariesElement": "viewport",
                                              "enabled": true,
                                              "padding": 8,
                                            },
                                          }
                                        }
                                        placement="bottom"
                                      >
                                        <InnerPopper
                                          eventsEnabled={true}
                                          modifiers={
                                            Object {
                                              "preventOverflow": Object {
                                                "boundariesElement": "viewport",
                                                "enabled": true,
                                                "padding": 8,
                                              },
                                            }
                                          }
                                          placement="bottom"
                                          positionFixed={false}
                                          referenceElement={
                                            <svg
                                              aria-hidden="true"
                                              class="sc-bwzfXH bbrsYH"
                                              color="currentColor"
                                              fill="currentColor"
                                              focusable="false"
                                              height="32px"
                                              icon="more"
                                              p="half"
                                              viewBox="0 0 24 24"
                                              width="32px"
                                            >
                                              <path
                                                d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
                                              />
                                            </svg>
                                          }
                                        />
                                      </Popper>
                                    </Manager>
                                  </button>
                                </StyledComponent>
                              </IconicButton__WrapperButton>
                            </ForwardRef>
                          </StyledComponent>
                        </Styled(Component)>
                      </InnerReference>
                    </Reference>
                    <Popper
                      modifiers={
                        Object {
                          "preventOverflow": Object {
                            "boundariesElement": "viewport",
                            "enabled": true,
                            "padding": 8,
                          },
                        }
                      }
                      placement="bottom-start"
                    >
                      <InnerPopper
                        eventsEnabled={true}
                        modifiers={
                          Object {
                            "preventOverflow": Object {
                              "boundariesElement": "viewport",
                              "enabled": true,
                              "padding": 8,
                            },
                          }
                        }
                        placement="bottom-start"
                        positionFixed={false}
                        referenceElement={
                          <button
                            aria-expanded="true"
                            aria-haspopup="true"
                            aria-label="Close menu"
                            class="IconicButton__WrapperButton-sc-1u3dojp-1 dmBfBQ sc-gZMcBi giNnHm"
                            type="button"
                          >
                            <svg
                              aria-hidden="true"
                              class="sc-bwzfXH bbrsYH"
                              color="currentColor"
                              fill="currentColor"
                              focusable="false"
                              height="32px"
                              icon="more"
                              p="half"
                              viewBox="0 0 24 24"
                              width="32px"
                            >
                              <path
                                d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
                              />
                            </svg>
                          </button>
                        }
                      >
                        <Styled(Component)
                          backgroundColor="whiteGrey"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onMouseDown={[Function]}
                          placement="bottom-start"
                          popperProps={
                            Object {
                              "arrowProps": Object {
                                "ref": [Function],
                                "style": Object {},
                              },
                              "outOfBoundaries": undefined,
                              "placement": undefined,
                              "ref": [Function],
                              "scheduleUpdate": [Function],
                              "style": Object {
                                "left": 0,
                                "opacity": 0,
                                "pointerEvents": "none",
                                "position": "absolute",
                                "top": 0,
                              },
                            }
                          }
                          showArrow={true}
                        >
                          <StyledComponent
                            backgroundColor="whiteGrey"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "_foldedDefaultProps": Object {
                                  "backgroundColor": "whiteGrey",
                                  "showArrow": true,
                                },
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-jzJRlG",
                                  "isStatic": false,
                                  "lastClassName": "cFzqlc",
                                  "rules": Array [
                                    [Function],
                                    [Function],
                                  ],
                                },
                                "displayName": "Styled(Component)",
                                "foldedComponentIds": Array [],
                                "propTypes": Object {
                                  "backgroundColor": [Function],
                                  "showArrow": [Function],
                                },
                                "render": [Function],
                                "styledComponentId": "sc-jzJRlG",
                                "target": Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "defaultProps": Object {
                                    "children": null,
                                    "className": undefined,
                                    "popperProps": null,
                                    "showArrow": true,
                                  },
                                  "propTypes": Object {
                                    "backgroundColor": [Function],
                                    "children": [Function],
                                    "className": [Function],
                                    "popperProps": [Function],
                                    "showArrow": [Function],
                                  },
                                  "render": [Function],
                                },
                                "toString": [Function],
                                "usesTheme": false,
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={[Function]}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onFocus={[Function]}
                            onMouseDown={[Function]}
                            placement="bottom-start"
                            popperProps={
                              Object {
                                "arrowProps": Object {
                                  "ref": [Function],
                                  "style": Object {},
                                },
                                "outOfBoundaries": undefined,
                                "placement": undefined,
                                "ref": [Function],
                                "scheduleUpdate": [Function],
                                "style": Object {
                                  "left": 0,
                                  "opacity": 0,
                                  "pointerEvents": "none",
                                  "position": "absolute",
                                  "top": 0,
                                },
                              }
                            }
                            showArrow={true}
                          >
                            <ForwardRef
                              backgroundColor="whiteGrey"
                              className="sc-jzJRlG cFzqlc"
                              onBlur={[Function]}
                              onClick={[Function]}
                              onFocus={[Function]}
                              onMouseDown={[Function]}
                              placement="bottom-start"
                              popperProps={
                                Object {
                                  "arrowProps": Object {
                                    "ref": [Function],
                                    "style": Object {},
                                  },
                                  "outOfBoundaries": undefined,
                                  "placement": undefined,
                                  "ref": [Function],
                                  "scheduleUpdate": [Function],
                                  "style": Object {
                                    "left": 0,
                                    "opacity": 0,
                                    "pointerEvents": "none",
                                    "position": "absolute",
                                    "top": 0,
                                  },
                                }
                              }
                              showArrow={true}
                            >
                              <div
                                className="sc-jzJRlG cFzqlc"
                                onBlur={[Function]}
                                onClick={[Function]}
                                onFocus={[Function]}
                                onMouseDown={[Function]}
                                placement="bottom-start"
                                style={
                                  Object {
                                    "left": 0,
                                    "opacity": 0,
                                    "pointerEvents": "none",
                                    "position": "absolute",
                                    "top": 0,
                                  }
                                }
                              >
                                <PopperArrow
                                  backgroundColor="whiteGrey"
                                  borderColor="whiteGrey"
                                  placement="bottom"
                                  style={Object {}}
                                >
                                  <StyledComponent
                                    backgroundColor="whiteGrey"
                                    borderColor="whiteGrey"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "_foldedDefaultProps": Object {
                                          "backgroundColor": "white",
                                          "borderColor": "grey",
                                          "placement": "bottom",
                                        },
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "PopperArrow-sc-1bcgj4w-0",
                                          "isStatic": false,
                                          "lastClassName": "fCYGcX",
                                          "rules": Array [
                                            "position: absolute;",
                                            "height: 8px;",
                                            "width: 8px;",
                                            "margin: 12px;",
                                            "&:before {",
                                            "border-style: solid;",
                                            "content: '';",
                                            "display: block;",
                                            "height: 0;",
                                            "margin: auto;",
                                            "position: absolute;",
                                            "width: 0;",
                                            "}",
                                            "&:after {",
                                            "border-style: solid;",
                                            "content: '';",
                                            "display: block;",
                                            "height: 0;",
                                            "margin: auto;",
                                            "position: absolute;",
                                            "width: 0;",
                                            "}",
                                            [Function],
                                            [Function],
                                          ],
                                        },
                                        "displayName": "PopperArrow",
                                        "foldedComponentIds": Array [],
                                        "propTypes": Object {
                                          "backgroundColor": [Function],
                                          "borderColor": [Function],
                                          "placement": [Function],
                                        },
                                        "render": [Function],
                                        "styledComponentId": "PopperArrow-sc-1bcgj4w-0",
                                        "target": "div",
                                        "toString": [Function],
                                        "usesTheme": false,
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={[Function]}
                                    placement="bottom"
                                    style={Object {}}
                                  >
                                    <div
                                      className="PopperArrow-sc-1bcgj4w-0 fCYGcX"
                                      style={Object {}}
                                    />
                                  </StyledComponent>
                                </PopperArrow>
                                <DetectOutsideClick
                                  clickRef={
                                    Array [
                                      <div
                                        class="sc-jzJRlG cFzqlc"
                                        placement="bottom-start"
                                        style="position: absolute; top: 0px; left: 0px; opacity: 0; pointer-events: none;"
                                      >
                                        <div
                                          class="PopperArrow-sc-1bcgj4w-0 fCYGcX"
                                        />
                                        <a
                                          class="DropdownLink-sc-1myz2tl-0 hMdKgw"
                                          color="darkBlue"
                                          href="/"
                                        >
                                          Dropdown Link
                                        </a>
                                        <button
                                          class="DropdownButton-sc-15i1gee-0 hbBHzR"
                                          color="#00438f"
                                        >
                                          Dropdown Button
                                        </button>
                                        <div
                                          class="DropdownItem-sc-17fo530-0 kRNvSY"
                                          color="darkBlue"
                                        >
                                          <a
                                            href="/"
                                            style="text-decoration: none;"
                                          >
                                            Custom Link Component
                                          </a>
                                        </div>
                                      </div>,
                                      <button
                                        aria-expanded="true"
                                        aria-haspopup="true"
                                        aria-label="Close menu"
                                        class="IconicButton__WrapperButton-sc-1u3dojp-1 dmBfBQ sc-gZMcBi giNnHm"
                                        type="button"
                                      >
                                        <svg
                                          aria-hidden="true"
                                          class="sc-bwzfXH bbrsYH"
                                          color="currentColor"
                                          fill="currentColor"
                                          focusable="false"
                                          height="32px"
                                          icon="more"
                                          p="half"
                                          viewBox="0 0 24 24"
                                          width="32px"
                                        >
                                          <path
                                            d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
                                          />
                                        </svg>
                                      </button>,
                                    ]
                                  }
                                  onClick={[Function]}
                                />
                                <DropdownLink
                                  bgHoverColor="lightGrey"
                                  color="darkBlue"
                                  hoverColor="darkBlue"
                                  href="/"
                                >
                                  <StyledComponent
                                    bgHoverColor="lightGrey"
                                    color="darkBlue"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "_foldedDefaultProps": Object {
                                          "bgHoverColor": "lightGrey",
                                          "color": "darkBlue",
                                          "hoverColor": "darkBlue",
                                        },
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "DropdownLink-sc-1myz2tl-0",
                                          "isStatic": false,
                                          "lastClassName": "hMdKgw",
                                          "rules": Array [
                                            [Function],
                                          ],
                                        },
                                        "displayName": "DropdownLink",
                                        "foldedComponentIds": Array [],
                                        "propTypes": Object {
                                          "bgHoverColor": [Function],
                                          "color": [Function],
                                          "hoverColor": [Function],
                                        },
                                        "render": [Function],
                                        "styledComponentId": "DropdownLink-sc-1myz2tl-0",
                                        "target": "a",
                                        "toString": [Function],
                                        "usesTheme": false,
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    hoverColor="darkBlue"
                                    href="/"
                                  >
                                    <a
                                      className="DropdownLink-sc-1myz2tl-0 hMdKgw"
                                      color="darkBlue"
                                      href="/"
                                    >
                                      Dropdown Link
                                    </a>
                                  </StyledComponent>
                                </DropdownLink>
                                <DropdownButton
                                  bgHoverColor="#e4e7eb"
                                  color="#00438f"
                                  disabled={false}
                                  hoverColor="#00438f"
                                  onClick={[Function]}
                                >
                                  <StyledComponent
                                    bgHoverColor="#e4e7eb"
                                    color="#00438f"
                                    disabled={false}
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "_foldedDefaultProps": Object {
                                          "bgHoverColor": "#e4e7eb",
                                          "color": "#00438f",
                                          "disabled": false,
                                          "hoverColor": "#00438f",
                                        },
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "DropdownButton-sc-15i1gee-0",
                                          "isStatic": false,
                                          "lastClassName": "hbBHzR",
                                          "rules": Array [
                                            [Function],
                                          ],
                                        },
                                        "displayName": "DropdownButton",
                                        "foldedComponentIds": Array [],
                                        "propTypes": Object {
                                          "bgHoverColor": [Function],
                                          "color": [Function],
                                          "disabled": [Function],
                                          "hoverColor": [Function],
                                        },
                                        "render": [Function],
                                        "styledComponentId": "DropdownButton-sc-15i1gee-0",
                                        "target": "button",
                                        "toString": [Function],
                                        "usesTheme": false,
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    hoverColor="#00438f"
                                    onClick={[Function]}
                                  >
                                    <button
                                      className="DropdownButton-sc-15i1gee-0 hbBHzR"
                                      color="#00438f"
                                      disabled={false}
                                      onClick={[Function]}
                                    >
                                      Dropdown Button
                                    </button>
                                  </StyledComponent>
                                </DropdownButton>
                                <DropdownItem
                                  bgHoverColor="lightGrey"
                                  color="darkBlue"
                                  hoverColor="darkBlue"
                                >
                                  <StyledComponent
                                    bgHoverColor="lightGrey"
                                    color="darkBlue"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "_foldedDefaultProps": Object {
                                          "bgHoverColor": "lightGrey",
                                          "color": "darkBlue",
                                          "hoverColor": "darkBlue",
                                        },
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "DropdownItem-sc-17fo530-0",
                                          "isStatic": false,
                                          "lastClassName": "kRNvSY",
                                          "rules": Array [
                                            [Function],
                                          ],
                                        },
                                        "displayName": "DropdownItem",
                                        "foldedComponentIds": Array [],
                                        "propTypes": Object {
                                          "bgHoverColor": [Function],
                                          "color": [Function],
                                          "hoverColor": [Function],
                                        },
                                        "render": [Function],
                                        "styledComponentId": "DropdownItem-sc-17fo530-0",
                                        "target": "div",
                                        "toString": [Function],
                                        "usesTheme": false,
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    hoverColor="darkBlue"
                                  >
                                    <div
                                      className="DropdownItem-sc-17fo530-0 kRNvSY"
                                      color="darkBlue"
                                    >
                                      <a
                                        href="/"
                                        style={
                                          Object {
                                            "textDecoration": "none",
                                          }
                                        }
                                      >
                                        Custom Link Component
                                      </a>
                                    </div>
                                  </StyledComponent>
                                </DropdownItem>
                              </div>
                            </ForwardRef>
                          </StyledComponent>
                        </Styled(Component)>
                      </InnerPopper>
                    </Popper>
                  </Manager>
                </StatelessDropdownMenu>
              </MenuState>
            </MenuComponent>
          </ThemeProvider>
        </div>
      </StyledComponent>
    </NDSProvider__GlobalStyles>
  </NDSProvider>
</div>
`;

exports[`Storyshots DropdownMenu with button closing menu 1`] = `
<div
  style={
    Object {
      "padding": "24px",
    }
  }
>
  <NDSProvider
    theme={
      Object {
        "borders": Array [],
        "breakpoints": Object {
          "extraLarge": "1920px",
          "extraSmall": "0px",
          "large": "1360px",
          "medium": "1024px",
          "small": "768px",
        },
        "colors": Object {
          "black": "#011e38",
          "blackBlue": "#122b47",
          "blue": "#216beb",
          "darkBlue": "#00438f",
          "darkGrey": "#434d59",
          "green": "#008059",
          "grey": "#c0c8d1",
          "lightBlue": "#e1ebfa",
          "lightGreen": "#e9f7f2",
          "lightGrey": "#e4e7eb",
          "lightRed": "#fae6ea",
          "lightYellow": "#fcf5e3",
          "red": "#cc1439",
          "white": "#ffffff",
          "whiteGrey": "#f0f2f5",
          "yellow": "#ffbb00",
        },
        "fontSizes": Object {
          "large": "20px",
          "larger": "26px",
          "largest": "46px",
          "medium": "16px",
          "small": "14px",
          "smaller": "12px",
        },
        "fontWeights": Object {
          "bold": "600",
          "light": "300",
          "medium": "500",
          "normal": "400",
        },
        "fonts": Object {
          "base": "'IBM Plex Sans', sans-serif",
          "mono": "'IBM Plex Mono', monospace",
        },
        "lineHeights": Object {
          "base": "1.5",
          "sectionTitle": "1.23076923",
          "smallTextBase": "1.71428571",
          "smallTextCompressed": "1.14285714",
          "smallerText": "1.33333333",
          "subsectionTitle": "1.2",
          "title": "1.04347826",
        },
        "radii": Object {
          "circle": "50%",
          "medium": "4px",
          "small": "2px",
        },
        "shadows": Object {
          "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
          "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
          "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
          "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
          "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
        },
        "space": Object {
          "half": "4px",
          "none": "0px",
          "x1": "8px",
          "x2": "16px",
          "x3": "24px",
          "x4": "32px",
          "x5": "40px",
          "x6": "48px",
          "x8": "64px",
        },
        "zIndex": Object {
          "content": 100,
          "overlay": 1000,
          "tabsBar": 210,
          "tabsScollIndicator": 200,
        },
      }
    }
  >
    <GlobalStyleComponent />
    <NDSProvider__GlobalStyles
      theme={
        Object {
          "borders": Array [],
          "breakpoints": Object {
            "extraLarge": "1920px",
            "extraSmall": "0px",
            "large": "1360px",
            "medium": "1024px",
            "small": "768px",
          },
          "colors": Object {
            "black": "#011e38",
            "blackBlue": "#122b47",
            "blue": "#216beb",
            "darkBlue": "#00438f",
            "darkGrey": "#434d59",
            "green": "#008059",
            "grey": "#c0c8d1",
            "lightBlue": "#e1ebfa",
            "lightGreen": "#e9f7f2",
            "lightGrey": "#e4e7eb",
            "lightRed": "#fae6ea",
            "lightYellow": "#fcf5e3",
            "red": "#cc1439",
            "white": "#ffffff",
            "whiteGrey": "#f0f2f5",
            "yellow": "#ffbb00",
          },
          "fontSizes": Object {
            "large": "20px",
            "larger": "26px",
            "largest": "46px",
            "medium": "16px",
            "small": "14px",
            "smaller": "12px",
          },
          "fontWeights": Object {
            "bold": "600",
            "light": "300",
            "medium": "500",
            "normal": "400",
          },
          "fonts": Object {
            "base": "'IBM Plex Sans', sans-serif",
            "mono": "'IBM Plex Mono', monospace",
          },
          "lineHeights": Object {
            "base": "1.5",
            "sectionTitle": "1.23076923",
            "smallTextBase": "1.71428571",
            "smallTextCompressed": "1.14285714",
            "smallerText": "1.33333333",
            "subsectionTitle": "1.2",
            "title": "1.04347826",
          },
          "radii": Object {
            "circle": "50%",
            "medium": "4px",
            "small": "2px",
          },
          "shadows": Object {
            "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
            "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
            "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
            "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
            "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
          },
          "space": Object {
            "half": "4px",
            "none": "0px",
            "x1": "8px",
            "x2": "16px",
            "x3": "24px",
            "x4": "32px",
            "x5": "40px",
            "x6": "48px",
            "x8": "64px",
          },
          "zIndex": Object {
            "content": 100,
            "overlay": 1000,
            "tabsBar": 210,
            "tabsScollIndicator": 200,
          },
        }
      }
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "NDSProvider__GlobalStyles-f28eoq-0",
              "isStatic": false,
              "lastClassName": "gWUgWA",
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "NDSProvider__GlobalStyles",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "NDSProvider__GlobalStyles-f28eoq-0",
            "target": "div",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        theme={
          Object {
            "borders": Array [],
            "breakpoints": Object {
              "extraLarge": "1920px",
              "extraSmall": "0px",
              "large": "1360px",
              "medium": "1024px",
              "small": "768px",
            },
            "colors": Object {
              "black": "#011e38",
              "blackBlue": "#122b47",
              "blue": "#216beb",
              "darkBlue": "#00438f",
              "darkGrey": "#434d59",
              "green": "#008059",
              "grey": "#c0c8d1",
              "lightBlue": "#e1ebfa",
              "lightGreen": "#e9f7f2",
              "lightGrey": "#e4e7eb",
              "lightRed": "#fae6ea",
              "lightYellow": "#fcf5e3",
              "red": "#cc1439",
              "white": "#ffffff",
              "whiteGrey": "#f0f2f5",
              "yellow": "#ffbb00",
            },
            "fontSizes": Object {
              "large": "20px",
              "larger": "26px",
              "largest": "46px",
              "medium": "16px",
              "small": "14px",
              "smaller": "12px",
            },
            "fontWeights": Object {
              "bold": "600",
              "light": "300",
              "medium": "500",
              "normal": "400",
            },
            "fonts": Object {
              "base": "'IBM Plex Sans', sans-serif",
              "mono": "'IBM Plex Mono', monospace",
            },
            "lineHeights": Object {
              "base": "1.5",
              "sectionTitle": "1.23076923",
              "smallTextBase": "1.71428571",
              "smallTextCompressed": "1.14285714",
              "smallerText": "1.33333333",
              "subsectionTitle": "1.2",
              "title": "1.04347826",
            },
            "radii": Object {
              "circle": "50%",
              "medium": "4px",
              "small": "2px",
            },
            "shadows": Object {
              "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
              "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
              "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
              "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
              "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
            },
            "space": Object {
              "half": "4px",
              "none": "0px",
              "x1": "8px",
              "x2": "16px",
              "x3": "24px",
              "x4": "32px",
              "x5": "40px",
              "x6": "48px",
              "x8": "64px",
            },
            "zIndex": Object {
              "content": 100,
              "overlay": 1000,
              "tabsBar": 210,
              "tabsScollIndicator": 200,
            },
          }
        }
      >
        <div
          className="NDSProvider__GlobalStyles-f28eoq-0 gWUgWA"
        >
          <ThemeProvider
            theme={
              Object {
                "borders": Array [],
                "breakpoints": Object {
                  "extraLarge": "1920px",
                  "extraSmall": "0px",
                  "large": "1360px",
                  "medium": "1024px",
                  "small": "768px",
                },
                "colors": Object {
                  "black": "#011e38",
                  "blackBlue": "#122b47",
                  "blue": "#216beb",
                  "darkBlue": "#00438f",
                  "darkGrey": "#434d59",
                  "green": "#008059",
                  "grey": "#c0c8d1",
                  "lightBlue": "#e1ebfa",
                  "lightGreen": "#e9f7f2",
                  "lightGrey": "#e4e7eb",
                  "lightRed": "#fae6ea",
                  "lightYellow": "#fcf5e3",
                  "red": "#cc1439",
                  "white": "#ffffff",
                  "whiteGrey": "#f0f2f5",
                  "yellow": "#ffbb00",
                },
                "fontSizes": Object {
                  "large": "20px",
                  "larger": "26px",
                  "largest": "46px",
                  "medium": "16px",
                  "small": "14px",
                  "smaller": "12px",
                },
                "fontWeights": Object {
                  "bold": "600",
                  "light": "300",
                  "medium": "500",
                  "normal": "400",
                },
                "fonts": Object {
                  "base": "'IBM Plex Sans', sans-serif",
                  "mono": "'IBM Plex Mono', monospace",
                },
                "lineHeights": Object {
                  "base": "1.5",
                  "sectionTitle": "1.23076923",
                  "smallTextBase": "1.71428571",
                  "smallTextCompressed": "1.14285714",
                  "smallerText": "1.33333333",
                  "subsectionTitle": "1.2",
                  "title": "1.04347826",
                },
                "radii": Object {
                  "circle": "50%",
                  "medium": "4px",
                  "small": "2px",
                },
                "shadows": Object {
                  "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
                  "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
                  "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
                  "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
                  "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
                },
                "space": Object {
                  "half": "4px",
                  "none": "0px",
                  "x1": "8px",
                  "x2": "16px",
                  "x3": "24px",
                  "x4": "32px",
                  "x5": "40px",
                  "x6": "48px",
                  "x8": "64px",
                },
                "zIndex": Object {
                  "content": 100,
                  "overlay": 1000,
                  "tabsBar": 210,
                  "tabsScollIndicator": 200,
                },
              }
            }
          >
            <MenuComponent
              defaultOpen={false}
              hideDelay="200"
              showDelay="100"
            >
              <MenuState
                defaultOpen={false}
                hideDelay="200"
                showDelay="100"
              >
                <StatelessDropdownMenu
                  disabled={false}
                  menuState={
                    Object {
                      "closeMenu": [Function],
                      "handleMenuKeydown": [Function],
                      "isOpen": false,
                      "openMenu": [Function],
                      "toggleMenu": [Function],
                    }
                  }
                  modifiers={
                    Object {
                      "preventOverflow": Object {
                        "boundariesElement": "viewport",
                        "enabled": true,
                        "padding": 8,
                      },
                    }
                  }
                  placement="bottom-start"
                  showArrow={true}
                  trigger={[Function]}
                >
                  <Manager>
                    <Reference>
                      <InnerReference
                        setReferenceNode={[Function]}
                      >
                        <Styled(Component)
                          aria-expanded={false}
                          aria-haspopup={true}
                          aria-label="Open menu"
                          disabled={null}
                          icon="more"
                          onBlur={[Function]}
                          onClick={[Function]}
                          type="button"
                        >
                          <StyledComponent
                            aria-expanded={false}
                            aria-haspopup={true}
                            aria-label="Open menu"
                            disabled={null}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-gZMcBi",
                                  "isStatic": false,
                                  "lastClassName": "giNnHm",
                                  "rules": Array [],
                                },
                                "displayName": "Styled(Component)",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-gZMcBi",
                                "target": Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "defaultProps": Object {
                                    "children": null,
                                    "className": undefined,
                                    "disabled": false,
                                    "labelHidden": false,
                                  },
                                  "propTypes": Object {
                                    "children": [Function],
                                    "className": [Function],
                                    "disabled": [Function],
                                    "icon": [Function],
                                    "labelHidden": [Function],
                                  },
                                  "render": [Function],
                                },
                                "toString": [Function],
                                "usesTheme": false,
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={[Function]}
                            icon="more"
                            onBlur={[Function]}
                            onClick={[Function]}
                            type="button"
                          >
                            <ForwardRef
                              aria-expanded={false}
                              aria-haspopup={true}
                              aria-label="Open menu"
                              className="sc-gZMcBi giNnHm"
                              disabled={null}
                              icon="more"
                              labelHidden={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              type="button"
                            >
                              <IconicButton__WrapperButton
                                aria-expanded={false}
                                aria-haspopup={true}
                                aria-label="Open menu"
                                className="sc-gZMcBi giNnHm"
                                disabled={null}
                                onBlur={[Function]}
                                onClick={[Function]}
                                type="button"
                              >
                                <StyledComponent
                                  aria-expanded={false}
                                  aria-haspopup={true}
                                  aria-label="Open menu"
                                  className="sc-gZMcBi giNnHm"
                                  disabled={null}
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "IconicButton__WrapperButton-sc-1u3dojp-1",
                                        "isStatic": false,
                                        "lastClassName": "dmBfBQ",
                                        "rules": Array [
                                          [Function],
                                          [Function],
                                        ],
                                      },
                                      "displayName": "IconicButton__WrapperButton",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "IconicButton__WrapperButton-sc-1u3dojp-1",
                                      "target": "button",
                                      "toString": [Function],
                                      "usesTheme": false,
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={[Function]}
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <button
                                    aria-expanded={false}
                                    aria-haspopup={true}
                                    aria-label="Open menu"
                                    className="IconicButton__WrapperButton-sc-1u3dojp-1 dmBfBQ sc-gZMcBi giNnHm"
                                    disabled={null}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <Manager>
                                      <Reference>
                                        <InnerReference
                                          setReferenceNode={[Function]}
                                        >
                                          <Styled(Component)
                                            color="currentColor"
                                            icon="more"
                                            p="half"
                                            size="32px"
                                            title={null}
                                          >
                                            <StyledComponent
                                              color="currentColor"
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "_foldedDefaultProps": Object {
                                                    "color": "currentColor",
                                                    "size": "24px",
                                                    "title": null,
                                                  },
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-bwzfXH",
                                                    "isStatic": false,
                                                    "lastClassName": "bbrsYH",
                                                    "rules": Array [
                                                      [Function],
                                                      [Function],
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "Styled(Component)",
                                                  "foldedComponentIds": Array [],
                                                  "propTypes": Object {
                                                    "color": [Function],
                                                    "icon": [Function],
                                                    "size": [Function],
                                                    "title": [Function],
                                                  },
                                                  "render": [Function],
                                                  "styledComponentId": "sc-bwzfXH",
                                                  "target": Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "defaultProps": Object {
                                                      "className": undefined,
                                                      "color": "currentColor",
                                                      "focusable": false,
                                                      "size": "24px",
                                                      "title": null,
                                                    },
                                                    "propTypes": Object {
                                                      "className": [Function],
                                                      "color": [Function],
                                                      "focusable": [Function],
                                                      "icon": [Function],
                                                      "size": [Function],
                                                      "title": [Function],
                                                    },
                                                    "render": [Function],
                                                  },
                                                  "toString": [Function],
                                                  "usesTheme": false,
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={[Function]}
                                              icon="more"
                                              p="half"
                                              size="32px"
                                              title={null}
                                            >
                                              <ForwardRef
                                                className="sc-bwzfXH bbrsYH"
                                                color="currentColor"
                                                focusable={false}
                                                icon="more"
                                                p="half"
                                                size="32px"
                                                title={null}
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="sc-bwzfXH bbrsYH"
                                                  color="currentColor"
                                                  fill="currentColor"
                                                  focusable={false}
                                                  height="32px"
                                                  icon="more"
                                                  p="half"
                                                  size="32px"
                                                  title={null}
                                                  viewBox="0 0 24 24"
                                                  width="32px"
                                                >
                                                  <path
                                                    d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
                                                    key="0"
                                                  />
                                                </svg>
                                              </ForwardRef>
                                            </StyledComponent>
                                          </Styled(Component)>
                                        </InnerReference>
                                      </Reference>
                                      <Popper
                                        modifiers={
                                          Object {
                                            "preventOverflow": Object {
                                              "boundariesElement": "viewport",
                                              "enabled": true,
                                              "padding": 8,
                                            },
                                          }
                                        }
                                        placement="bottom"
                                      >
                                        <InnerPopper
                                          eventsEnabled={true}
                                          modifiers={
                                            Object {
                                              "preventOverflow": Object {
                                                "boundariesElement": "viewport",
                                                "enabled": true,
                                                "padding": 8,
                                              },
                                            }
                                          }
                                          placement="bottom"
                                          positionFixed={false}
                                          referenceElement={
                                            <svg
                                              aria-hidden="true"
                                              class="sc-bwzfXH bbrsYH"
                                              color="currentColor"
                                              fill="currentColor"
                                              focusable="false"
                                              height="32px"
                                              icon="more"
                                              p="half"
                                              viewBox="0 0 24 24"
                                              width="32px"
                                            >
                                              <path
                                                d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
                                              />
                                            </svg>
                                          }
                                        />
                                      </Popper>
                                    </Manager>
                                  </button>
                                </StyledComponent>
                              </IconicButton__WrapperButton>
                            </ForwardRef>
                          </StyledComponent>
                        </Styled(Component)>
                      </InnerReference>
                    </Reference>
                  </Manager>
                </StatelessDropdownMenu>
              </MenuState>
            </MenuComponent>
          </ThemeProvider>
        </div>
      </StyledComponent>
    </NDSProvider__GlobalStyles>
  </NDSProvider>
</div>
`;

exports[`Storyshots DropdownMenu with custom colors 1`] = `
<div
  style={
    Object {
      "padding": "24px",
    }
  }
>
  <NDSProvider
    theme={
      Object {
        "borders": Array [],
        "breakpoints": Object {
          "extraLarge": "1920px",
          "extraSmall": "0px",
          "large": "1360px",
          "medium": "1024px",
          "small": "768px",
        },
        "colors": Object {
          "black": "#011e38",
          "blackBlue": "#122b47",
          "blue": "#216beb",
          "darkBlue": "#00438f",
          "darkGrey": "#434d59",
          "green": "#008059",
          "grey": "#c0c8d1",
          "lightBlue": "#e1ebfa",
          "lightGreen": "#e9f7f2",
          "lightGrey": "#e4e7eb",
          "lightRed": "#fae6ea",
          "lightYellow": "#fcf5e3",
          "red": "#cc1439",
          "white": "#ffffff",
          "whiteGrey": "#f0f2f5",
          "yellow": "#ffbb00",
        },
        "fontSizes": Object {
          "large": "20px",
          "larger": "26px",
          "largest": "46px",
          "medium": "16px",
          "small": "14px",
          "smaller": "12px",
        },
        "fontWeights": Object {
          "bold": "600",
          "light": "300",
          "medium": "500",
          "normal": "400",
        },
        "fonts": Object {
          "base": "'IBM Plex Sans', sans-serif",
          "mono": "'IBM Plex Mono', monospace",
        },
        "lineHeights": Object {
          "base": "1.5",
          "sectionTitle": "1.23076923",
          "smallTextBase": "1.71428571",
          "smallTextCompressed": "1.14285714",
          "smallerText": "1.33333333",
          "subsectionTitle": "1.2",
          "title": "1.04347826",
        },
        "radii": Object {
          "circle": "50%",
          "medium": "4px",
          "small": "2px",
        },
        "shadows": Object {
          "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
          "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
          "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
          "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
          "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
        },
        "space": Object {
          "half": "4px",
          "none": "0px",
          "x1": "8px",
          "x2": "16px",
          "x3": "24px",
          "x4": "32px",
          "x5": "40px",
          "x6": "48px",
          "x8": "64px",
        },
        "zIndex": Object {
          "content": 100,
          "overlay": 1000,
          "tabsBar": 210,
          "tabsScollIndicator": 200,
        },
      }
    }
  >
    <GlobalStyleComponent />
    <NDSProvider__GlobalStyles
      theme={
        Object {
          "borders": Array [],
          "breakpoints": Object {
            "extraLarge": "1920px",
            "extraSmall": "0px",
            "large": "1360px",
            "medium": "1024px",
            "small": "768px",
          },
          "colors": Object {
            "black": "#011e38",
            "blackBlue": "#122b47",
            "blue": "#216beb",
            "darkBlue": "#00438f",
            "darkGrey": "#434d59",
            "green": "#008059",
            "grey": "#c0c8d1",
            "lightBlue": "#e1ebfa",
            "lightGreen": "#e9f7f2",
            "lightGrey": "#e4e7eb",
            "lightRed": "#fae6ea",
            "lightYellow": "#fcf5e3",
            "red": "#cc1439",
            "white": "#ffffff",
            "whiteGrey": "#f0f2f5",
            "yellow": "#ffbb00",
          },
          "fontSizes": Object {
            "large": "20px",
            "larger": "26px",
            "largest": "46px",
            "medium": "16px",
            "small": "14px",
            "smaller": "12px",
          },
          "fontWeights": Object {
            "bold": "600",
            "light": "300",
            "medium": "500",
            "normal": "400",
          },
          "fonts": Object {
            "base": "'IBM Plex Sans', sans-serif",
            "mono": "'IBM Plex Mono', monospace",
          },
          "lineHeights": Object {
            "base": "1.5",
            "sectionTitle": "1.23076923",
            "smallTextBase": "1.71428571",
            "smallTextCompressed": "1.14285714",
            "smallerText": "1.33333333",
            "subsectionTitle": "1.2",
            "title": "1.04347826",
          },
          "radii": Object {
            "circle": "50%",
            "medium": "4px",
            "small": "2px",
          },
          "shadows": Object {
            "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
            "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
            "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
            "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
            "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
          },
          "space": Object {
            "half": "4px",
            "none": "0px",
            "x1": "8px",
            "x2": "16px",
            "x3": "24px",
            "x4": "32px",
            "x5": "40px",
            "x6": "48px",
            "x8": "64px",
          },
          "zIndex": Object {
            "content": 100,
            "overlay": 1000,
            "tabsBar": 210,
            "tabsScollIndicator": 200,
          },
        }
      }
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "NDSProvider__GlobalStyles-f28eoq-0",
              "isStatic": false,
              "lastClassName": "gWUgWA",
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "NDSProvider__GlobalStyles",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "NDSProvider__GlobalStyles-f28eoq-0",
            "target": "div",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        theme={
          Object {
            "borders": Array [],
            "breakpoints": Object {
              "extraLarge": "1920px",
              "extraSmall": "0px",
              "large": "1360px",
              "medium": "1024px",
              "small": "768px",
            },
            "colors": Object {
              "black": "#011e38",
              "blackBlue": "#122b47",
              "blue": "#216beb",
              "darkBlue": "#00438f",
              "darkGrey": "#434d59",
              "green": "#008059",
              "grey": "#c0c8d1",
              "lightBlue": "#e1ebfa",
              "lightGreen": "#e9f7f2",
              "lightGrey": "#e4e7eb",
              "lightRed": "#fae6ea",
              "lightYellow": "#fcf5e3",
              "red": "#cc1439",
              "white": "#ffffff",
              "whiteGrey": "#f0f2f5",
              "yellow": "#ffbb00",
            },
            "fontSizes": Object {
              "large": "20px",
              "larger": "26px",
              "largest": "46px",
              "medium": "16px",
              "small": "14px",
              "smaller": "12px",
            },
            "fontWeights": Object {
              "bold": "600",
              "light": "300",
              "medium": "500",
              "normal": "400",
            },
            "fonts": Object {
              "base": "'IBM Plex Sans', sans-serif",
              "mono": "'IBM Plex Mono', monospace",
            },
            "lineHeights": Object {
              "base": "1.5",
              "sectionTitle": "1.23076923",
              "smallTextBase": "1.71428571",
              "smallTextCompressed": "1.14285714",
              "smallerText": "1.33333333",
              "subsectionTitle": "1.2",
              "title": "1.04347826",
            },
            "radii": Object {
              "circle": "50%",
              "medium": "4px",
              "small": "2px",
            },
            "shadows": Object {
              "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
              "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
              "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
              "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
              "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
            },
            "space": Object {
              "half": "4px",
              "none": "0px",
              "x1": "8px",
              "x2": "16px",
              "x3": "24px",
              "x4": "32px",
              "x5": "40px",
              "x6": "48px",
              "x8": "64px",
            },
            "zIndex": Object {
              "content": 100,
              "overlay": 1000,
              "tabsBar": 210,
              "tabsScollIndicator": 200,
            },
          }
        }
      >
        <div
          className="NDSProvider__GlobalStyles-f28eoq-0 gWUgWA"
        >
          <ThemeProvider
            theme={
              Object {
                "borders": Array [],
                "breakpoints": Object {
                  "extraLarge": "1920px",
                  "extraSmall": "0px",
                  "large": "1360px",
                  "medium": "1024px",
                  "small": "768px",
                },
                "colors": Object {
                  "black": "#011e38",
                  "blackBlue": "#122b47",
                  "blue": "#216beb",
                  "darkBlue": "#00438f",
                  "darkGrey": "#434d59",
                  "green": "#008059",
                  "grey": "#c0c8d1",
                  "lightBlue": "#e1ebfa",
                  "lightGreen": "#e9f7f2",
                  "lightGrey": "#e4e7eb",
                  "lightRed": "#fae6ea",
                  "lightYellow": "#fcf5e3",
                  "red": "#cc1439",
                  "white": "#ffffff",
                  "whiteGrey": "#f0f2f5",
                  "yellow": "#ffbb00",
                },
                "fontSizes": Object {
                  "large": "20px",
                  "larger": "26px",
                  "largest": "46px",
                  "medium": "16px",
                  "small": "14px",
                  "smaller": "12px",
                },
                "fontWeights": Object {
                  "bold": "600",
                  "light": "300",
                  "medium": "500",
                  "normal": "400",
                },
                "fonts": Object {
                  "base": "'IBM Plex Sans', sans-serif",
                  "mono": "'IBM Plex Mono', monospace",
                },
                "lineHeights": Object {
                  "base": "1.5",
                  "sectionTitle": "1.23076923",
                  "smallTextBase": "1.71428571",
                  "smallTextCompressed": "1.14285714",
                  "smallerText": "1.33333333",
                  "subsectionTitle": "1.2",
                  "title": "1.04347826",
                },
                "radii": Object {
                  "circle": "50%",
                  "medium": "4px",
                  "small": "2px",
                },
                "shadows": Object {
                  "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
                  "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
                  "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
                  "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
                  "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
                },
                "space": Object {
                  "half": "4px",
                  "none": "0px",
                  "x1": "8px",
                  "x2": "16px",
                  "x3": "24px",
                  "x4": "32px",
                  "x5": "40px",
                  "x6": "48px",
                  "x8": "64px",
                },
                "zIndex": Object {
                  "content": 100,
                  "overlay": 1000,
                  "tabsBar": 210,
                  "tabsScollIndicator": 200,
                },
              }
            }
          >
            <MenuComponent
              backgroundColor="blackBlue"
              defaultOpen={false}
              hideDelay="200"
              showDelay="100"
            >
              <MenuState
                defaultOpen={false}
                hideDelay="200"
                showDelay="100"
              >
                <StatelessDropdownMenu
                  backgroundColor="blackBlue"
                  disabled={false}
                  menuState={
                    Object {
                      "closeMenu": [Function],
                      "handleMenuKeydown": [Function],
                      "isOpen": false,
                      "openMenu": [Function],
                      "toggleMenu": [Function],
                    }
                  }
                  modifiers={
                    Object {
                      "preventOverflow": Object {
                        "boundariesElement": "viewport",
                        "enabled": true,
                        "padding": 8,
                      },
                    }
                  }
                  placement="bottom-start"
                  showArrow={true}
                  trigger={[Function]}
                >
                  <Manager>
                    <Reference>
                      <InnerReference
                        setReferenceNode={[Function]}
                      >
                        <Styled(Component)
                          aria-expanded={false}
                          aria-haspopup={true}
                          aria-label="Open menu"
                          disabled={null}
                          icon="more"
                          onBlur={[Function]}
                          onClick={[Function]}
                          type="button"
                        >
                          <StyledComponent
                            aria-expanded={false}
                            aria-haspopup={true}
                            aria-label="Open menu"
                            disabled={null}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-gZMcBi",
                                  "isStatic": false,
                                  "lastClassName": "giNnHm",
                                  "rules": Array [],
                                },
                                "displayName": "Styled(Component)",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-gZMcBi",
                                "target": Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "defaultProps": Object {
                                    "children": null,
                                    "className": undefined,
                                    "disabled": false,
                                    "labelHidden": false,
                                  },
                                  "propTypes": Object {
                                    "children": [Function],
                                    "className": [Function],
                                    "disabled": [Function],
                                    "icon": [Function],
                                    "labelHidden": [Function],
                                  },
                                  "render": [Function],
                                },
                                "toString": [Function],
                                "usesTheme": false,
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={[Function]}
                            icon="more"
                            onBlur={[Function]}
                            onClick={[Function]}
                            type="button"
                          >
                            <ForwardRef
                              aria-expanded={false}
                              aria-haspopup={true}
                              aria-label="Open menu"
                              className="sc-gZMcBi giNnHm"
                              disabled={null}
                              icon="more"
                              labelHidden={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              type="button"
                            >
                              <IconicButton__WrapperButton
                                aria-expanded={false}
                                aria-haspopup={true}
                                aria-label="Open menu"
                                className="sc-gZMcBi giNnHm"
                                disabled={null}
                                onBlur={[Function]}
                                onClick={[Function]}
                                type="button"
                              >
                                <StyledComponent
                                  aria-expanded={false}
                                  aria-haspopup={true}
                                  aria-label="Open menu"
                                  className="sc-gZMcBi giNnHm"
                                  disabled={null}
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "IconicButton__WrapperButton-sc-1u3dojp-1",
                                        "isStatic": false,
                                        "lastClassName": "dmBfBQ",
                                        "rules": Array [
                                          [Function],
                                          [Function],
                                        ],
                                      },
                                      "displayName": "IconicButton__WrapperButton",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "IconicButton__WrapperButton-sc-1u3dojp-1",
                                      "target": "button",
                                      "toString": [Function],
                                      "usesTheme": false,
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={[Function]}
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <button
                                    aria-expanded={false}
                                    aria-haspopup={true}
                                    aria-label="Open menu"
                                    className="IconicButton__WrapperButton-sc-1u3dojp-1 dmBfBQ sc-gZMcBi giNnHm"
                                    disabled={null}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <Manager>
                                      <Reference>
                                        <InnerReference
                                          setReferenceNode={[Function]}
                                        >
                                          <Styled(Component)
                                            color="currentColor"
                                            icon="more"
                                            p="half"
                                            size="32px"
                                            title={null}
                                          >
                                            <StyledComponent
                                              color="currentColor"
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "_foldedDefaultProps": Object {
                                                    "color": "currentColor",
                                                    "size": "24px",
                                                    "title": null,
                                                  },
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-bwzfXH",
                                                    "isStatic": false,
                                                    "lastClassName": "bbrsYH",
                                                    "rules": Array [
                                                      [Function],
                                                      [Function],
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "Styled(Component)",
                                                  "foldedComponentIds": Array [],
                                                  "propTypes": Object {
                                                    "color": [Function],
                                                    "icon": [Function],
                                                    "size": [Function],
                                                    "title": [Function],
                                                  },
                                                  "render": [Function],
                                                  "styledComponentId": "sc-bwzfXH",
                                                  "target": Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "defaultProps": Object {
                                                      "className": undefined,
                                                      "color": "currentColor",
                                                      "focusable": false,
                                                      "size": "24px",
                                                      "title": null,
                                                    },
                                                    "propTypes": Object {
                                                      "className": [Function],
                                                      "color": [Function],
                                                      "focusable": [Function],
                                                      "icon": [Function],
                                                      "size": [Function],
                                                      "title": [Function],
                                                    },
                                                    "render": [Function],
                                                  },
                                                  "toString": [Function],
                                                  "usesTheme": false,
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={[Function]}
                                              icon="more"
                                              p="half"
                                              size="32px"
                                              title={null}
                                            >
                                              <ForwardRef
                                                className="sc-bwzfXH bbrsYH"
                                                color="currentColor"
                                                focusable={false}
                                                icon="more"
                                                p="half"
                                                size="32px"
                                                title={null}
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="sc-bwzfXH bbrsYH"
                                                  color="currentColor"
                                                  fill="currentColor"
                                                  focusable={false}
                                                  height="32px"
                                                  icon="more"
                                                  p="half"
                                                  size="32px"
                                                  title={null}
                                                  viewBox="0 0 24 24"
                                                  width="32px"
                                                >
                                                  <path
                                                    d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
                                                    key="0"
                                                  />
                                                </svg>
                                              </ForwardRef>
                                            </StyledComponent>
                                          </Styled(Component)>
                                        </InnerReference>
                                      </Reference>
                                      <Popper
                                        modifiers={
                                          Object {
                                            "preventOverflow": Object {
                                              "boundariesElement": "viewport",
                                              "enabled": true,
                                              "padding": 8,
                                            },
                                          }
                                        }
                                        placement="bottom"
                                      >
                                        <InnerPopper
                                          eventsEnabled={true}
                                          modifiers={
                                            Object {
                                              "preventOverflow": Object {
                                                "boundariesElement": "viewport",
                                                "enabled": true,
                                                "padding": 8,
                                              },
                                            }
                                          }
                                          placement="bottom"
                                          positionFixed={false}
                                          referenceElement={
                                            <svg
                                              aria-hidden="true"
                                              class="sc-bwzfXH bbrsYH"
                                              color="currentColor"
                                              fill="currentColor"
                                              focusable="false"
                                              height="32px"
                                              icon="more"
                                              p="half"
                                              viewBox="0 0 24 24"
                                              width="32px"
                                            >
                                              <path
                                                d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
                                              />
                                            </svg>
                                          }
                                        />
                                      </Popper>
                                    </Manager>
                                  </button>
                                </StyledComponent>
                              </IconicButton__WrapperButton>
                            </ForwardRef>
                          </StyledComponent>
                        </Styled(Component)>
                      </InnerReference>
                    </Reference>
                  </Manager>
                </StatelessDropdownMenu>
              </MenuState>
            </MenuComponent>
          </ThemeProvider>
        </div>
      </StyledComponent>
    </NDSProvider__GlobalStyles>
  </NDSProvider>
</div>
`;

exports[`Storyshots DropdownMenu with custom item 1`] = `
<div
  style={
    Object {
      "padding": "24px",
    }
  }
>
  <NDSProvider
    theme={
      Object {
        "borders": Array [],
        "breakpoints": Object {
          "extraLarge": "1920px",
          "extraSmall": "0px",
          "large": "1360px",
          "medium": "1024px",
          "small": "768px",
        },
        "colors": Object {
          "black": "#011e38",
          "blackBlue": "#122b47",
          "blue": "#216beb",
          "darkBlue": "#00438f",
          "darkGrey": "#434d59",
          "green": "#008059",
          "grey": "#c0c8d1",
          "lightBlue": "#e1ebfa",
          "lightGreen": "#e9f7f2",
          "lightGrey": "#e4e7eb",
          "lightRed": "#fae6ea",
          "lightYellow": "#fcf5e3",
          "red": "#cc1439",
          "white": "#ffffff",
          "whiteGrey": "#f0f2f5",
          "yellow": "#ffbb00",
        },
        "fontSizes": Object {
          "large": "20px",
          "larger": "26px",
          "largest": "46px",
          "medium": "16px",
          "small": "14px",
          "smaller": "12px",
        },
        "fontWeights": Object {
          "bold": "600",
          "light": "300",
          "medium": "500",
          "normal": "400",
        },
        "fonts": Object {
          "base": "'IBM Plex Sans', sans-serif",
          "mono": "'IBM Plex Mono', monospace",
        },
        "lineHeights": Object {
          "base": "1.5",
          "sectionTitle": "1.23076923",
          "smallTextBase": "1.71428571",
          "smallTextCompressed": "1.14285714",
          "smallerText": "1.33333333",
          "subsectionTitle": "1.2",
          "title": "1.04347826",
        },
        "radii": Object {
          "circle": "50%",
          "medium": "4px",
          "small": "2px",
        },
        "shadows": Object {
          "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
          "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
          "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
          "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
          "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
        },
        "space": Object {
          "half": "4px",
          "none": "0px",
          "x1": "8px",
          "x2": "16px",
          "x3": "24px",
          "x4": "32px",
          "x5": "40px",
          "x6": "48px",
          "x8": "64px",
        },
        "zIndex": Object {
          "content": 100,
          "overlay": 1000,
          "tabsBar": 210,
          "tabsScollIndicator": 200,
        },
      }
    }
  >
    <GlobalStyleComponent />
    <NDSProvider__GlobalStyles
      theme={
        Object {
          "borders": Array [],
          "breakpoints": Object {
            "extraLarge": "1920px",
            "extraSmall": "0px",
            "large": "1360px",
            "medium": "1024px",
            "small": "768px",
          },
          "colors": Object {
            "black": "#011e38",
            "blackBlue": "#122b47",
            "blue": "#216beb",
            "darkBlue": "#00438f",
            "darkGrey": "#434d59",
            "green": "#008059",
            "grey": "#c0c8d1",
            "lightBlue": "#e1ebfa",
            "lightGreen": "#e9f7f2",
            "lightGrey": "#e4e7eb",
            "lightRed": "#fae6ea",
            "lightYellow": "#fcf5e3",
            "red": "#cc1439",
            "white": "#ffffff",
            "whiteGrey": "#f0f2f5",
            "yellow": "#ffbb00",
          },
          "fontSizes": Object {
            "large": "20px",
            "larger": "26px",
            "largest": "46px",
            "medium": "16px",
            "small": "14px",
            "smaller": "12px",
          },
          "fontWeights": Object {
            "bold": "600",
            "light": "300",
            "medium": "500",
            "normal": "400",
          },
          "fonts": Object {
            "base": "'IBM Plex Sans', sans-serif",
            "mono": "'IBM Plex Mono', monospace",
          },
          "lineHeights": Object {
            "base": "1.5",
            "sectionTitle": "1.23076923",
            "smallTextBase": "1.71428571",
            "smallTextCompressed": "1.14285714",
            "smallerText": "1.33333333",
            "subsectionTitle": "1.2",
            "title": "1.04347826",
          },
          "radii": Object {
            "circle": "50%",
            "medium": "4px",
            "small": "2px",
          },
          "shadows": Object {
            "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
            "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
            "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
            "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
            "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
          },
          "space": Object {
            "half": "4px",
            "none": "0px",
            "x1": "8px",
            "x2": "16px",
            "x3": "24px",
            "x4": "32px",
            "x5": "40px",
            "x6": "48px",
            "x8": "64px",
          },
          "zIndex": Object {
            "content": 100,
            "overlay": 1000,
            "tabsBar": 210,
            "tabsScollIndicator": 200,
          },
        }
      }
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "NDSProvider__GlobalStyles-f28eoq-0",
              "isStatic": false,
              "lastClassName": "gWUgWA",
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "NDSProvider__GlobalStyles",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "NDSProvider__GlobalStyles-f28eoq-0",
            "target": "div",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        theme={
          Object {
            "borders": Array [],
            "breakpoints": Object {
              "extraLarge": "1920px",
              "extraSmall": "0px",
              "large": "1360px",
              "medium": "1024px",
              "small": "768px",
            },
            "colors": Object {
              "black": "#011e38",
              "blackBlue": "#122b47",
              "blue": "#216beb",
              "darkBlue": "#00438f",
              "darkGrey": "#434d59",
              "green": "#008059",
              "grey": "#c0c8d1",
              "lightBlue": "#e1ebfa",
              "lightGreen": "#e9f7f2",
              "lightGrey": "#e4e7eb",
              "lightRed": "#fae6ea",
              "lightYellow": "#fcf5e3",
              "red": "#cc1439",
              "white": "#ffffff",
              "whiteGrey": "#f0f2f5",
              "yellow": "#ffbb00",
            },
            "fontSizes": Object {
              "large": "20px",
              "larger": "26px",
              "largest": "46px",
              "medium": "16px",
              "small": "14px",
              "smaller": "12px",
            },
            "fontWeights": Object {
              "bold": "600",
              "light": "300",
              "medium": "500",
              "normal": "400",
            },
            "fonts": Object {
              "base": "'IBM Plex Sans', sans-serif",
              "mono": "'IBM Plex Mono', monospace",
            },
            "lineHeights": Object {
              "base": "1.5",
              "sectionTitle": "1.23076923",
              "smallTextBase": "1.71428571",
              "smallTextCompressed": "1.14285714",
              "smallerText": "1.33333333",
              "subsectionTitle": "1.2",
              "title": "1.04347826",
            },
            "radii": Object {
              "circle": "50%",
              "medium": "4px",
              "small": "2px",
            },
            "shadows": Object {
              "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
              "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
              "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
              "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
              "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
            },
            "space": Object {
              "half": "4px",
              "none": "0px",
              "x1": "8px",
              "x2": "16px",
              "x3": "24px",
              "x4": "32px",
              "x5": "40px",
              "x6": "48px",
              "x8": "64px",
            },
            "zIndex": Object {
              "content": 100,
              "overlay": 1000,
              "tabsBar": 210,
              "tabsScollIndicator": 200,
            },
          }
        }
      >
        <div
          className="NDSProvider__GlobalStyles-f28eoq-0 gWUgWA"
        >
          <ThemeProvider
            theme={
              Object {
                "borders": Array [],
                "breakpoints": Object {
                  "extraLarge": "1920px",
                  "extraSmall": "0px",
                  "large": "1360px",
                  "medium": "1024px",
                  "small": "768px",
                },
                "colors": Object {
                  "black": "#011e38",
                  "blackBlue": "#122b47",
                  "blue": "#216beb",
                  "darkBlue": "#00438f",
                  "darkGrey": "#434d59",
                  "green": "#008059",
                  "grey": "#c0c8d1",
                  "lightBlue": "#e1ebfa",
                  "lightGreen": "#e9f7f2",
                  "lightGrey": "#e4e7eb",
                  "lightRed": "#fae6ea",
                  "lightYellow": "#fcf5e3",
                  "red": "#cc1439",
                  "white": "#ffffff",
                  "whiteGrey": "#f0f2f5",
                  "yellow": "#ffbb00",
                },
                "fontSizes": Object {
                  "large": "20px",
                  "larger": "26px",
                  "largest": "46px",
                  "medium": "16px",
                  "small": "14px",
                  "smaller": "12px",
                },
                "fontWeights": Object {
                  "bold": "600",
                  "light": "300",
                  "medium": "500",
                  "normal": "400",
                },
                "fonts": Object {
                  "base": "'IBM Plex Sans', sans-serif",
                  "mono": "'IBM Plex Mono', monospace",
                },
                "lineHeights": Object {
                  "base": "1.5",
                  "sectionTitle": "1.23076923",
                  "smallTextBase": "1.71428571",
                  "smallTextCompressed": "1.14285714",
                  "smallerText": "1.33333333",
                  "subsectionTitle": "1.2",
                  "title": "1.04347826",
                },
                "radii": Object {
                  "circle": "50%",
                  "medium": "4px",
                  "small": "2px",
                },
                "shadows": Object {
                  "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
                  "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
                  "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
                  "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
                  "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
                },
                "space": Object {
                  "half": "4px",
                  "none": "0px",
                  "x1": "8px",
                  "x2": "16px",
                  "x3": "24px",
                  "x4": "32px",
                  "x5": "40px",
                  "x6": "48px",
                  "x8": "64px",
                },
                "zIndex": Object {
                  "content": 100,
                  "overlay": 1000,
                  "tabsBar": 210,
                  "tabsScollIndicator": 200,
                },
              }
            }
          >
            <MenuComponent
              defaultOpen={false}
              hideDelay="200"
              showDelay="100"
            >
              <MenuState
                defaultOpen={false}
                hideDelay="200"
                showDelay="100"
              >
                <StatelessDropdownMenu
                  disabled={false}
                  menuState={
                    Object {
                      "closeMenu": [Function],
                      "handleMenuKeydown": [Function],
                      "isOpen": false,
                      "openMenu": [Function],
                      "toggleMenu": [Function],
                    }
                  }
                  modifiers={
                    Object {
                      "preventOverflow": Object {
                        "boundariesElement": "viewport",
                        "enabled": true,
                        "padding": 8,
                      },
                    }
                  }
                  placement="bottom-start"
                  showArrow={true}
                  trigger={[Function]}
                >
                  <Manager>
                    <Reference>
                      <InnerReference
                        setReferenceNode={[Function]}
                      >
                        <Styled(Component)
                          aria-expanded={false}
                          aria-haspopup={true}
                          aria-label="Open menu"
                          disabled={null}
                          icon="more"
                          onBlur={[Function]}
                          onClick={[Function]}
                          type="button"
                        >
                          <StyledComponent
                            aria-expanded={false}
                            aria-haspopup={true}
                            aria-label="Open menu"
                            disabled={null}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-gZMcBi",
                                  "isStatic": false,
                                  "lastClassName": "giNnHm",
                                  "rules": Array [],
                                },
                                "displayName": "Styled(Component)",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-gZMcBi",
                                "target": Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "defaultProps": Object {
                                    "children": null,
                                    "className": undefined,
                                    "disabled": false,
                                    "labelHidden": false,
                                  },
                                  "propTypes": Object {
                                    "children": [Function],
                                    "className": [Function],
                                    "disabled": [Function],
                                    "icon": [Function],
                                    "labelHidden": [Function],
                                  },
                                  "render": [Function],
                                },
                                "toString": [Function],
                                "usesTheme": false,
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={[Function]}
                            icon="more"
                            onBlur={[Function]}
                            onClick={[Function]}
                            type="button"
                          >
                            <ForwardRef
                              aria-expanded={false}
                              aria-haspopup={true}
                              aria-label="Open menu"
                              className="sc-gZMcBi giNnHm"
                              disabled={null}
                              icon="more"
                              labelHidden={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              type="button"
                            >
                              <IconicButton__WrapperButton
                                aria-expanded={false}
                                aria-haspopup={true}
                                aria-label="Open menu"
                                className="sc-gZMcBi giNnHm"
                                disabled={null}
                                onBlur={[Function]}
                                onClick={[Function]}
                                type="button"
                              >
                                <StyledComponent
                                  aria-expanded={false}
                                  aria-haspopup={true}
                                  aria-label="Open menu"
                                  className="sc-gZMcBi giNnHm"
                                  disabled={null}
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "IconicButton__WrapperButton-sc-1u3dojp-1",
                                        "isStatic": false,
                                        "lastClassName": "dmBfBQ",
                                        "rules": Array [
                                          [Function],
                                          [Function],
                                        ],
                                      },
                                      "displayName": "IconicButton__WrapperButton",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "IconicButton__WrapperButton-sc-1u3dojp-1",
                                      "target": "button",
                                      "toString": [Function],
                                      "usesTheme": false,
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={[Function]}
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <button
                                    aria-expanded={false}
                                    aria-haspopup={true}
                                    aria-label="Open menu"
                                    className="IconicButton__WrapperButton-sc-1u3dojp-1 dmBfBQ sc-gZMcBi giNnHm"
                                    disabled={null}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <Manager>
                                      <Reference>
                                        <InnerReference
                                          setReferenceNode={[Function]}
                                        >
                                          <Styled(Component)
                                            color="currentColor"
                                            icon="more"
                                            p="half"
                                            size="32px"
                                            title={null}
                                          >
                                            <StyledComponent
                                              color="currentColor"
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "_foldedDefaultProps": Object {
                                                    "color": "currentColor",
                                                    "size": "24px",
                                                    "title": null,
                                                  },
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-bwzfXH",
                                                    "isStatic": false,
                                                    "lastClassName": "bbrsYH",
                                                    "rules": Array [
                                                      [Function],
                                                      [Function],
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "Styled(Component)",
                                                  "foldedComponentIds": Array [],
                                                  "propTypes": Object {
                                                    "color": [Function],
                                                    "icon": [Function],
                                                    "size": [Function],
                                                    "title": [Function],
                                                  },
                                                  "render": [Function],
                                                  "styledComponentId": "sc-bwzfXH",
                                                  "target": Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "defaultProps": Object {
                                                      "className": undefined,
                                                      "color": "currentColor",
                                                      "focusable": false,
                                                      "size": "24px",
                                                      "title": null,
                                                    },
                                                    "propTypes": Object {
                                                      "className": [Function],
                                                      "color": [Function],
                                                      "focusable": [Function],
                                                      "icon": [Function],
                                                      "size": [Function],
                                                      "title": [Function],
                                                    },
                                                    "render": [Function],
                                                  },
                                                  "toString": [Function],
                                                  "usesTheme": false,
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={[Function]}
                                              icon="more"
                                              p="half"
                                              size="32px"
                                              title={null}
                                            >
                                              <ForwardRef
                                                className="sc-bwzfXH bbrsYH"
                                                color="currentColor"
                                                focusable={false}
                                                icon="more"
                                                p="half"
                                                size="32px"
                                                title={null}
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="sc-bwzfXH bbrsYH"
                                                  color="currentColor"
                                                  fill="currentColor"
                                                  focusable={false}
                                                  height="32px"
                                                  icon="more"
                                                  p="half"
                                                  size="32px"
                                                  title={null}
                                                  viewBox="0 0 24 24"
                                                  width="32px"
                                                >
                                                  <path
                                                    d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
                                                    key="0"
                                                  />
                                                </svg>
                                              </ForwardRef>
                                            </StyledComponent>
                                          </Styled(Component)>
                                        </InnerReference>
                                      </Reference>
                                      <Popper
                                        modifiers={
                                          Object {
                                            "preventOverflow": Object {
                                              "boundariesElement": "viewport",
                                              "enabled": true,
                                              "padding": 8,
                                            },
                                          }
                                        }
                                        placement="bottom"
                                      >
                                        <InnerPopper
                                          eventsEnabled={true}
                                          modifiers={
                                            Object {
                                              "preventOverflow": Object {
                                                "boundariesElement": "viewport",
                                                "enabled": true,
                                                "padding": 8,
                                              },
                                            }
                                          }
                                          placement="bottom"
                                          positionFixed={false}
                                          referenceElement={
                                            <svg
                                              aria-hidden="true"
                                              class="sc-bwzfXH bbrsYH"
                                              color="currentColor"
                                              fill="currentColor"
                                              focusable="false"
                                              height="32px"
                                              icon="more"
                                              p="half"
                                              viewBox="0 0 24 24"
                                              width="32px"
                                            >
                                              <path
                                                d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
                                              />
                                            </svg>
                                          }
                                        />
                                      </Popper>
                                    </Manager>
                                  </button>
                                </StyledComponent>
                              </IconicButton__WrapperButton>
                            </ForwardRef>
                          </StyledComponent>
                        </Styled(Component)>
                      </InnerReference>
                    </Reference>
                  </Manager>
                </StatelessDropdownMenu>
              </MenuState>
            </MenuComponent>
          </ThemeProvider>
        </div>
      </StyledComponent>
    </NDSProvider__GlobalStyles>
  </NDSProvider>
</div>
`;

exports[`Storyshots DropdownMenu with custom trigger 1`] = `
<div
  style={
    Object {
      "padding": "24px",
    }
  }
>
  <NDSProvider
    theme={
      Object {
        "borders": Array [],
        "breakpoints": Object {
          "extraLarge": "1920px",
          "extraSmall": "0px",
          "large": "1360px",
          "medium": "1024px",
          "small": "768px",
        },
        "colors": Object {
          "black": "#011e38",
          "blackBlue": "#122b47",
          "blue": "#216beb",
          "darkBlue": "#00438f",
          "darkGrey": "#434d59",
          "green": "#008059",
          "grey": "#c0c8d1",
          "lightBlue": "#e1ebfa",
          "lightGreen": "#e9f7f2",
          "lightGrey": "#e4e7eb",
          "lightRed": "#fae6ea",
          "lightYellow": "#fcf5e3",
          "red": "#cc1439",
          "white": "#ffffff",
          "whiteGrey": "#f0f2f5",
          "yellow": "#ffbb00",
        },
        "fontSizes": Object {
          "large": "20px",
          "larger": "26px",
          "largest": "46px",
          "medium": "16px",
          "small": "14px",
          "smaller": "12px",
        },
        "fontWeights": Object {
          "bold": "600",
          "light": "300",
          "medium": "500",
          "normal": "400",
        },
        "fonts": Object {
          "base": "'IBM Plex Sans', sans-serif",
          "mono": "'IBM Plex Mono', monospace",
        },
        "lineHeights": Object {
          "base": "1.5",
          "sectionTitle": "1.23076923",
          "smallTextBase": "1.71428571",
          "smallTextCompressed": "1.14285714",
          "smallerText": "1.33333333",
          "subsectionTitle": "1.2",
          "title": "1.04347826",
        },
        "radii": Object {
          "circle": "50%",
          "medium": "4px",
          "small": "2px",
        },
        "shadows": Object {
          "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
          "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
          "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
          "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
          "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
        },
        "space": Object {
          "half": "4px",
          "none": "0px",
          "x1": "8px",
          "x2": "16px",
          "x3": "24px",
          "x4": "32px",
          "x5": "40px",
          "x6": "48px",
          "x8": "64px",
        },
        "zIndex": Object {
          "content": 100,
          "overlay": 1000,
          "tabsBar": 210,
          "tabsScollIndicator": 200,
        },
      }
    }
  >
    <GlobalStyleComponent />
    <NDSProvider__GlobalStyles
      theme={
        Object {
          "borders": Array [],
          "breakpoints": Object {
            "extraLarge": "1920px",
            "extraSmall": "0px",
            "large": "1360px",
            "medium": "1024px",
            "small": "768px",
          },
          "colors": Object {
            "black": "#011e38",
            "blackBlue": "#122b47",
            "blue": "#216beb",
            "darkBlue": "#00438f",
            "darkGrey": "#434d59",
            "green": "#008059",
            "grey": "#c0c8d1",
            "lightBlue": "#e1ebfa",
            "lightGreen": "#e9f7f2",
            "lightGrey": "#e4e7eb",
            "lightRed": "#fae6ea",
            "lightYellow": "#fcf5e3",
            "red": "#cc1439",
            "white": "#ffffff",
            "whiteGrey": "#f0f2f5",
            "yellow": "#ffbb00",
          },
          "fontSizes": Object {
            "large": "20px",
            "larger": "26px",
            "largest": "46px",
            "medium": "16px",
            "small": "14px",
            "smaller": "12px",
          },
          "fontWeights": Object {
            "bold": "600",
            "light": "300",
            "medium": "500",
            "normal": "400",
          },
          "fonts": Object {
            "base": "'IBM Plex Sans', sans-serif",
            "mono": "'IBM Plex Mono', monospace",
          },
          "lineHeights": Object {
            "base": "1.5",
            "sectionTitle": "1.23076923",
            "smallTextBase": "1.71428571",
            "smallTextCompressed": "1.14285714",
            "smallerText": "1.33333333",
            "subsectionTitle": "1.2",
            "title": "1.04347826",
          },
          "radii": Object {
            "circle": "50%",
            "medium": "4px",
            "small": "2px",
          },
          "shadows": Object {
            "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
            "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
            "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
            "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
            "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
          },
          "space": Object {
            "half": "4px",
            "none": "0px",
            "x1": "8px",
            "x2": "16px",
            "x3": "24px",
            "x4": "32px",
            "x5": "40px",
            "x6": "48px",
            "x8": "64px",
          },
          "zIndex": Object {
            "content": 100,
            "overlay": 1000,
            "tabsBar": 210,
            "tabsScollIndicator": 200,
          },
        }
      }
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "NDSProvider__GlobalStyles-f28eoq-0",
              "isStatic": false,
              "lastClassName": "gWUgWA",
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "NDSProvider__GlobalStyles",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "NDSProvider__GlobalStyles-f28eoq-0",
            "target": "div",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        theme={
          Object {
            "borders": Array [],
            "breakpoints": Object {
              "extraLarge": "1920px",
              "extraSmall": "0px",
              "large": "1360px",
              "medium": "1024px",
              "small": "768px",
            },
            "colors": Object {
              "black": "#011e38",
              "blackBlue": "#122b47",
              "blue": "#216beb",
              "darkBlue": "#00438f",
              "darkGrey": "#434d59",
              "green": "#008059",
              "grey": "#c0c8d1",
              "lightBlue": "#e1ebfa",
              "lightGreen": "#e9f7f2",
              "lightGrey": "#e4e7eb",
              "lightRed": "#fae6ea",
              "lightYellow": "#fcf5e3",
              "red": "#cc1439",
              "white": "#ffffff",
              "whiteGrey": "#f0f2f5",
              "yellow": "#ffbb00",
            },
            "fontSizes": Object {
              "large": "20px",
              "larger": "26px",
              "largest": "46px",
              "medium": "16px",
              "small": "14px",
              "smaller": "12px",
            },
            "fontWeights": Object {
              "bold": "600",
              "light": "300",
              "medium": "500",
              "normal": "400",
            },
            "fonts": Object {
              "base": "'IBM Plex Sans', sans-serif",
              "mono": "'IBM Plex Mono', monospace",
            },
            "lineHeights": Object {
              "base": "1.5",
              "sectionTitle": "1.23076923",
              "smallTextBase": "1.71428571",
              "smallTextCompressed": "1.14285714",
              "smallerText": "1.33333333",
              "subsectionTitle": "1.2",
              "title": "1.04347826",
            },
            "radii": Object {
              "circle": "50%",
              "medium": "4px",
              "small": "2px",
            },
            "shadows": Object {
              "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
              "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
              "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
              "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
              "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
            },
            "space": Object {
              "half": "4px",
              "none": "0px",
              "x1": "8px",
              "x2": "16px",
              "x3": "24px",
              "x4": "32px",
              "x5": "40px",
              "x6": "48px",
              "x8": "64px",
            },
            "zIndex": Object {
              "content": 100,
              "overlay": 1000,
              "tabsBar": 210,
              "tabsScollIndicator": 200,
            },
          }
        }
      >
        <div
          className="NDSProvider__GlobalStyles-f28eoq-0 gWUgWA"
        >
          <ThemeProvider
            theme={
              Object {
                "borders": Array [],
                "breakpoints": Object {
                  "extraLarge": "1920px",
                  "extraSmall": "0px",
                  "large": "1360px",
                  "medium": "1024px",
                  "small": "768px",
                },
                "colors": Object {
                  "black": "#011e38",
                  "blackBlue": "#122b47",
                  "blue": "#216beb",
                  "darkBlue": "#00438f",
                  "darkGrey": "#434d59",
                  "green": "#008059",
                  "grey": "#c0c8d1",
                  "lightBlue": "#e1ebfa",
                  "lightGreen": "#e9f7f2",
                  "lightGrey": "#e4e7eb",
                  "lightRed": "#fae6ea",
                  "lightYellow": "#fcf5e3",
                  "red": "#cc1439",
                  "white": "#ffffff",
                  "whiteGrey": "#f0f2f5",
                  "yellow": "#ffbb00",
                },
                "fontSizes": Object {
                  "large": "20px",
                  "larger": "26px",
                  "largest": "46px",
                  "medium": "16px",
                  "small": "14px",
                  "smaller": "12px",
                },
                "fontWeights": Object {
                  "bold": "600",
                  "light": "300",
                  "medium": "500",
                  "normal": "400",
                },
                "fonts": Object {
                  "base": "'IBM Plex Sans', sans-serif",
                  "mono": "'IBM Plex Mono', monospace",
                },
                "lineHeights": Object {
                  "base": "1.5",
                  "sectionTitle": "1.23076923",
                  "smallTextBase": "1.71428571",
                  "smallTextCompressed": "1.14285714",
                  "smallerText": "1.33333333",
                  "subsectionTitle": "1.2",
                  "title": "1.04347826",
                },
                "radii": Object {
                  "circle": "50%",
                  "medium": "4px",
                  "small": "2px",
                },
                "shadows": Object {
                  "error": "0px 0px 5px 0px rgba(204, 20, 57, .9)",
                  "focus": "0px 0px 5px 0px rgba(33, 107, 235, .9)",
                  "large": "0px 3px 5px 0px rgba(1, 30, 56, 0.1)",
                  "medium": "0px 1px 4px 0px rgba(1, 30, 56, 0.15)",
                  "small": "0px 0px 3px 0px rgba(1, 30, 56, 0.2)",
                },
                "space": Object {
                  "half": "4px",
                  "none": "0px",
                  "x1": "8px",
                  "x2": "16px",
                  "x3": "24px",
                  "x4": "32px",
                  "x5": "40px",
                  "x6": "48px",
                  "x8": "64px",
                },
                "zIndex": Object {
                  "content": 100,
                  "overlay": 1000,
                  "tabsBar": 210,
                  "tabsScollIndicator": 200,
                },
              }
            }
          >
            <MenuComponent
              defaultOpen={false}
              hideDelay="200"
              showDelay="100"
              trigger={[Function]}
            >
              <MenuState
                defaultOpen={false}
                hideDelay="200"
                showDelay="100"
              >
                <StatelessDropdownMenu
                  disabled={false}
                  menuState={
                    Object {
                      "closeMenu": [Function],
                      "handleMenuKeydown": [Function],
                      "isOpen": false,
                      "openMenu": [Function],
                      "toggleMenu": [Function],
                    }
                  }
                  modifiers={
                    Object {
                      "preventOverflow": Object {
                        "boundariesElement": "viewport",
                        "enabled": true,
                        "padding": 8,
                      },
                    }
                  }
                  placement="bottom-start"
                  showArrow={true}
                  trigger={[Function]}
                >
                  <Manager>
                    <Reference>
                      <InnerReference
                        setReferenceNode={[Function]}
                      >
                        <ForwardRef
                          aria-expanded={false}
                          aria-haspopup={true}
                          aria-label="Open menu"
                          asLink={false}
                          disabled={null}
                          fullWidth={false}
                          icon={null}
                          iconSide="right"
                          onBlur={[Function]}
                          onClick={[Function]}
                          size="medium"
                          type="button"
                        >
                          <Button__WrapperButton
                            aria-expanded={false}
                            aria-haspopup={true}
                            aria-label="Open menu"
                            disabled={null}
                            fullWidth={false}
                            onBlur={[Function]}
                            onClick={[Function]}
                            size="medium"
                            type="button"
                          >
                            <StyledComponent
                              aria-expanded={false}
                              aria-haspopup={true}
                              aria-label="Open menu"
                              disabled={null}
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Button__WrapperButton-sc-1omxup2-0",
                                    "isStatic": false,
                                    "lastClassName": "idlBaC",
                                    "rules": Array [
                                      [Function],
                                      [Function],
                                      [Function],
                                      [Function],
                                    ],
                                  },
                                  "displayName": "Button__WrapperButton",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Button__WrapperButton-sc-1omxup2-0",
                                  "target": "button",
                                  "toString": [Function],
                                  "usesTheme": false,
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              fullWidth={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              size="medium"
                              type="button"
                            >
                              <button
                                aria-expanded={false}
                                aria-haspopup={true}
                                aria-label="Open menu"
                                className="Button__WrapperButton-sc-1omxup2-0 idlBaC"
                                disabled={null}
                                onBlur={[Function]}
                                onClick={[Function]}
                                size="medium"
                                type="button"
                              >
                                Custom Trigger
                              </button>
                            </StyledComponent>
                          </Button__WrapperButton>
                        </ForwardRef>
                      </InnerReference>
                    </Reference>
                  </Manager>
                </StatelessDropdownMenu>
              </MenuState>
            </MenuComponent>
          </ThemeProvider>
        </div>
      </StyledComponent>
    </NDSProvider__GlobalStyles>
  </NDSProvider>
</div>
`;
